/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => BibleLinkerPlugin
});
var import_obsidian7 = __toModule(require("obsidian"));

// src/modals/copy-verse-modal.ts
var import_obsidian3 = __toModule(require("obsidian"));

// src/logic/copy-command.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/utils/regexes.ts
var oneVerseRegEx = new RegExp(/([^,:#]+)[,#.:;]\s*(\d+)\s*$/);
var multipleVersesRegEx = new RegExp(/([^,:#]+)[,#.:;]\s*(\d+)\s*[-.=]\s*(\d+)\s*$/);
var bookAndChapterRegEx = /([^,:#]*\S)[-|\s]+(\d+)/;
var multipleChaptersRegEx = /(\d*[^\d,:#]+)\s*(\d+)\s*-\s*(\d+)\s*$/;
var isOBSKFileRegEx = /([A-zÀ-ž0-9 ]+)-(\d{2,3})/;
function escapeForRegex(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

// src/logic/common.ts
var import_obsidian = __toModule(require("obsidian"));
function capitalize(str) {
  str = str.toLocaleLowerCase();
  for (let i = 0; i < str.length; i++) {
    if (/[^\s\d.,#-]/.test(str.charAt(i))) {
      return str.slice(0, i) + str.charAt(i).toUpperCase() + str.slice(i + 1);
    }
  }
  return str;
}
function parseUserVerseInput(userInput, verbose = true) {
  let bookAndChapter;
  let beginVerse;
  let endVerse;
  switch (true) {
    case oneVerseRegEx.test(userInput): {
      const [, matchedChapter, matchedVerse] = userInput.match(oneVerseRegEx);
      bookAndChapter = matchedChapter;
      beginVerse = Number(matchedVerse);
      endVerse = Number(matchedVerse);
      break;
    }
    case multipleVersesRegEx.test(userInput): {
      const [, matchedChapter, matchedBeginVerse, matchedEndVerse] = userInput.match(multipleVersesRegEx);
      bookAndChapter = matchedChapter;
      beginVerse = Number(matchedBeginVerse);
      endVerse = Number(matchedEndVerse);
      break;
    }
    default: {
      if (verbose) {
        new import_obsidian.Notice(`Wrong format "${userInput}"`);
      }
      throw "Could not parse user input";
    }
  }
  return { bookAndChapter, beginVerse, endVerse };
}
function parseUserBookInput(userInput) {
  let book;
  let firstChapter;
  let lastChapter;
  switch (true) {
    case multipleChaptersRegEx.test(userInput): {
      const [, matchedBook, matchedFirstChapter, matchedLastChapter] = userInput.match(multipleChaptersRegEx);
      book = matchedBook.trim();
      firstChapter = Number(matchedFirstChapter);
      lastChapter = Number(matchedLastChapter);
      break;
    }
    default: {
      new import_obsidian.Notice(`Wrong format "${userInput}"`);
      throw "Could not parse user input";
    }
  }
  return { book, firstChapter, lastChapter };
}
function getFileByFilename(app, filename, path, settings) {
  var _a;
  path = path != null ? path : "/";
  let filenameCopy = filename;
  let tFile = app.metadataCache.getFirstLinkpathDest(filenameCopy, path);
  if (tFile) {
    return { fileName: filenameCopy, tFile };
  }
  let [, book, chapter] = filenameCopy.match(bookAndChapterRegEx);
  const convertedBook = (_a = settings.inputBookMap[book.toLowerCase()]) != null ? _a : book;
  filenameCopy = `${convertedBook} ${chapter}`;
  tFile = app.metadataCache.getFirstLinkpathDest(filenameCopy, path);
  if (tFile) {
    return { fileName: filenameCopy, tFile };
  }
  filenameCopy = `${convertedBook}-${chapter}`;
  tFile = app.metadataCache.getFirstLinkpathDest(filenameCopy, path);
  if (tFile) {
    return { fileName: filenameCopy, tFile };
  }
  if (chapter.length == 1) {
    chapter = `0${chapter}`;
  }
  filenameCopy = `${convertedBook}-${chapter}`;
  tFile = app.metadataCache.getFirstLinkpathDest(filenameCopy, path);
  if (tFile) {
    return { fileName: filenameCopy, tFile };
  }
  return { fileName: filename, tFile };
}

// src/logic/copy-command.ts
function getTextOfVerses(app, userInput, settings, translationPath, linkOnly, verbose = true) {
  return __async(this, null, function* () {
    let { bookAndChapter, beginVerse, endVerse } = parseUserVerseInput(userInput, verbose);
    bookAndChapter = capitalize(bookAndChapter);
    const { fileName, tFile } = getFileByFilename(app, bookAndChapter, translationPath, settings);
    if (tFile) {
      return yield createCopyOutput(app, tFile, fileName, beginVerse, endVerse, settings, translationPath, linkOnly, verbose);
    } else {
      if (verbose) {
        new import_obsidian2.Notice(`File ${bookAndChapter} not found`);
      }
      throw "File not found";
    }
  });
}
function getVerseText(verseNumber, headings, lines, keepNewlines, newLinePrefix) {
  if (verseNumber >= headings.length) {
    new import_obsidian2.Notice("Verse out of range for given file");
    throw `VerseNumber ${verseNumber} is out of range of headings with length ${headings.length}`;
  }
  const headingLine = headings[verseNumber].position.start.line;
  if (headingLine + 1 >= lines.length) {
    new import_obsidian2.Notice("Logical error - please create issue on plugin's GitHub with your input and the file you were referencing. Thank you!");
    throw `HeadingLine ${headingLine + 1} is out of range of lines with length ${lines}`;
  }
  let output = "";
  let line = "";
  let i = 1;
  let isFirst = true;
  while (true) {
    line = lines[headingLine + i];
    if (/^#/.test(line) || !line && !isFirst) {
      break;
    }
    i++;
    if (line) {
      if (!isFirst) {
        output += keepNewlines ? `
${newLinePrefix}` : " ";
      }
      isFirst = false;
      output += line;
    }
  }
  return output;
}
function replaceNewline(input) {
  return input.replace(/\\n/g, "\n");
}
function getDisplayBookName(book, settings) {
  var _a;
  return (_a = settings.outputBookMap[book.toLowerCase()]) != null ? _a : book;
}
function createBookAndChapterOutput(fileBasename, settings) {
  const isOBSK = isOBSKFileRegEx.test(fileBasename);
  const regex = isOBSK ? isOBSKFileRegEx : bookAndChapterRegEx;
  let [, book, chapter] = fileBasename.match(regex);
  if (isOBSK && chapter.toString()[0] === "0") {
    chapter = chapter.substring(1);
  }
  return getDisplayBookName(book, settings) + " " + chapter;
}
function getFileFolderInTranslation(app, filename, translation, settings) {
  const tFileInfo = getFileByFilename(app, filename, translation, settings);
  return tFileInfo.tFile.parent.path;
}
function createCopyOutput(app, tFile, fileName, beginVerse, endVerse, settings, translationPath, linkOnly, verbose) {
  return __async(this, null, function* () {
    console.log(`118 b:${beginVerse} e:${endVerse}`);
    const bookAndChapterOutput = createBookAndChapterOutput(tFile.basename, settings);
    console.log(`119 b:${beginVerse} e:${endVerse}`);
    const file = app.vault.read(tFile);
    console.log(`120 b:${beginVerse} e:${endVerse}`);
    const lines = (yield file).split(/\r?\n/);
    console.log(`121 b:${beginVerse} e:${endVerse}`);
    const verseHeadingLevel = settings.verseHeadingLevel;
    console.log(`122 b:${beginVerse} e:${endVerse}`);
    const headings = app.metadataCache.getFileCache(tFile).headings.filter((heading) => !verseHeadingLevel || heading.level === verseHeadingLevel);
    console.log(`123 b:${beginVerse} e:${endVerse}`);
    const beginVerseNoOffset = beginVerse;
    console.log(`124 b:${beginVerse} e:${endVerse}`);
    beginVerse += settings.verseOffset;
    console.log(`125 b:${beginVerse} e:${endVerse}`);
    endVerse += settings.verseOffset;
    console.log(`126 b:${beginVerse} e:${endVerse}`);
    const nrOfVerses = headings.length - 1;
    console.log(`127 b:${beginVerse} e:${endVerse}`);
    const maxVerse = endVerse < nrOfVerses ? endVerse : nrOfVerses;
    console.log(`128 b:${beginVerse} e:${endVerse}`);
    const maxVerseNoOffset = maxVerse - settings.verseOffset;
    console.log(`129 b:${beginVerse} e:${endVerse}`);
    if (beginVerse > maxVerse) {
      if (verbose) {
        new import_obsidian2.Notice("Begin verse is bigger than end verse or chapter maximum");
      }
      throw "Begin verse is bigger than end verse or chapter maximum";
    }
    let postfix = "", res = "", pathToUse = "";
    if (!linkOnly) {
      res = settings.prefix;
      postfix = settings.postfix ? replaceNewline(settings.postfix) : " ";
    }
    if (settings.enableMultipleTranslations) {
      if (settings.translationLinkingType !== "main")
        pathToUse = getFileFolderInTranslation(app, fileName, translationPath, settings);
      else {
        pathToUse = getFileFolderInTranslation(app, fileName, settings.parsedTranslationPaths.first(), settings);
      }
    }
    if (settings.newLines && !linkOnly) {
      res += `${settings.firstLinePrefix}`;
    }
    if (beginVerse === maxVerse) {
      res += `[[${pathToUse ? pathToUse + "/" : ""}${fileName}#${headings[beginVerse].heading}|${bookAndChapterOutput}${settings.oneVerseNotation}${beginVerseNoOffset}]]${postfix}`;
    } else if (settings.linkEndVerse) {
      res += `[[${pathToUse ? pathToUse + "/" : ""}${fileName}#${headings[beginVerse].heading}|${bookAndChapterOutput}${settings.multipleVersesNotation}${beginVerseNoOffset}-]]`;
      res += `[[${pathToUse ? pathToUse + "/" : ""}${fileName}#${headings[maxVerse].heading}|${maxVerseNoOffset}]]${postfix}`;
    } else {
      res += `[[${pathToUse ? pathToUse + "/" : ""}${fileName}#${headings[beginVerse].heading}|${bookAndChapterOutput}${settings.multipleVersesNotation}${beginVerseNoOffset}-${maxVerseNoOffset}]]${postfix}`;
    }
    if (!linkOnly) {
      for (let i = beginVerse; i <= maxVerse; i++) {
        let versePrefix = "";
        const versePostfix = settings.insertSpace ? " " : "";
        if (settings.eachVersePrefix) {
          versePrefix += settings.eachVersePrefix.replace(/{n}/g, (i - settings.verseOffset).toString());
          versePrefix = versePrefix.replace(/{f}/g, `${fileName}`);
        }
        let verseText = getVerseText(i, headings, lines, settings.newLines, settings.prefix);
        if (settings.commentStart !== "" && settings.commentEnd !== "") {
          const escapedStart = escapeForRegex(settings.commentStart);
          const escapedEnd = escapeForRegex(settings.commentEnd);
          const replaceRegex = new RegExp(`${escapedStart}.*?${escapedEnd}`, "gs");
          verseText = verseText.replace(replaceRegex, "");
        }
        if (settings.newLines) {
          res += "\n" + settings.prefix + versePrefix + verseText;
        } else {
          res += versePrefix + verseText + versePostfix;
        }
      }
    }
    if (!settings.useInvisibleLinks)
      return res;
    if ((beginVerse == maxVerse || settings.linkEndVerse && beginVerse == maxVerse - 1) && (!settings.enableMultipleTranslations || settings.translationLinkingType === "main" || settings.translationLinkingType === "used"))
      return res;
    if (settings.newLines && !linkOnly) {
      res += `
${settings.prefix}`;
    }
    const lastVerseToLink = settings.linkEndVerse ? maxVerse - 1 : maxVerse;
    for (let i = beginVerse + 1; i <= lastVerseToLink; i++) {
      if (!settings.enableMultipleTranslations) {
        res += `[[${fileName}#${headings[i].heading}|]]`;
      } else {
        let translationPathsToUse = [];
        switch (settings.translationLinkingType) {
          case "all":
            translationPathsToUse = settings.parsedTranslationPaths.map((tr) => getFileFolderInTranslation(app, fileName, tr, settings));
            break;
          case "used":
            translationPathsToUse = [getFileFolderInTranslation(app, fileName, translationPath, settings)];
            break;
          case "usedAndMain":
            if (translationPath !== settings.parsedTranslationPaths.first()) {
              translationPathsToUse = [
                getFileFolderInTranslation(app, fileName, translationPath, settings),
                getFileFolderInTranslation(app, fileName, settings.parsedTranslationPaths.first(), settings)
              ];
            } else {
              translationPathsToUse = [getFileFolderInTranslation(app, fileName, translationPath, settings)];
            }
            break;
          case "main":
            translationPathsToUse = [getFileFolderInTranslation(app, fileName, settings.parsedTranslationPaths.first(), settings)];
            break;
          default:
            break;
        }
        translationPathsToUse.forEach((translationPath2) => {
          res += `[[${translationPath2}/${fileName}#${headings[i].heading}|]]`;
        });
      }
    }
    return res;
  });
}

// src/modals/copy-verse-modal.ts
function setPreviewText(previewEl, userInput, pluginSettings, translationPath, linkOnly) {
  return __async(this, null, function* () {
    try {
      const res = yield getTextOfVerses(this.app, userInput, pluginSettings, translationPath, linkOnly, false);
      previewEl.setText(res);
    } catch (e) {
      previewEl.setText("");
      return;
    }
  });
}
var LinkType;
(function(LinkType3) {
  LinkType3["First"] = "First verse";
  LinkType3["FirstOtherInvis"] = "First verse + other invisible";
  LinkType3["FirstLast"] = "First and last verse";
  LinkType3["FirstLastOtherInvis"] = "First and last + other invisible";
  LinkType3["All"] = "All verses";
  LinkType3["AllInvis"] = "All verses, invisible";
})(LinkType || (LinkType = {}));
var CopyVerseModal = class extends import_obsidian3.Modal {
  constructor(app, settings, onSubmit) {
    super(app);
    this.handleInput = () => __async(this, null, function* () {
      try {
        const res = yield getTextOfVerses(this.app, this.userInput, this.pluginSettings, this.translationPath, this.linkOnly);
        this.close();
        this.onSubmit(res);
      } catch (err) {
        return;
      }
    });
    this.onSubmit = onSubmit;
    this.pluginSettings = settings;
  }
  onOpen() {
    const { contentEl } = this;
    let previewEl;
    const refreshPreview = () => {
      setPreviewText(previewEl, this.userInput, this.pluginSettings, this.translationPath, this.linkOnly);
    };
    contentEl.createEl("h3", { text: "Copy verse by bible reference" });
    new import_obsidian3.Setting(contentEl).setName("Insert reference").addText((text) => text.onChange((value) => {
      this.userInput = value;
      refreshPreview();
    }).inputEl.focus());
    if (this.pluginSettings.enableMultipleTranslations && this.pluginSettings.translationsPaths !== "") {
      const transationPicker = new import_obsidian3.Setting(contentEl).setName("Pick translation");
      let buttons = [];
      let buttonPathMap = new Map();
      this.pluginSettings.parsedTranslationPaths.forEach((path) => {
        transationPicker.addButton((btn) => {
          buttons.push(btn);
          buttonPathMap.set(btn, path);
          let splittedPath = path.split("/");
          btn.setButtonText(splittedPath[splittedPath.length - 2]);
        });
        buttons.forEach((btn) => {
          btn.onClick(() => {
            buttons.forEach((b) => b.removeCta());
            btn.setCta();
            this.translationPath = buttonPathMap.get(btn);
            refreshPreview();
          });
        });
        buttons.first().setCta();
        this.translationPath = buttonPathMap.get(buttons.first());
      });
    }
    this.linkOnly = this.pluginSettings.linkOnly;
    new import_obsidian3.Setting(contentEl).setName("Link only").addToggle((tgl) => {
      tgl.setValue(this.pluginSettings.linkOnly);
      tgl.onChange((val) => {
        this.linkOnly = val;
        refreshPreview();
      });
    });
    contentEl.createEl("label", { text: "Preview" });
    previewEl = contentEl.createEl("textarea", {
      cls: "copy-preview",
      attr: { readonly: true }
    });
    new import_obsidian3.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("Link").setCta().onClick(this.handleInput);
    });
    contentEl.onkeydown = (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        this.handleInput();
      }
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/modals/link-verse-modal.ts
var import_obsidian5 = __toModule(require("obsidian"));

// src/logic/link-command.ts
var import_obsidian4 = __toModule(require("obsidian"));
function createLinks(app, userInput, linkType, useNewLine, settings) {
  return __async(this, null, function* () {
    if (multipleChaptersRegEx.test(userInput)) {
      return getLinksForChapters(app, userInput, linkType, useNewLine, settings);
    } else {
      return getLinksForVerses(app, userInput, linkType, useNewLine, settings);
    }
  });
}
function getLinksForVerses(app, userInput, linkType, useNewLine, settings) {
  return __async(this, null, function* () {
    let { bookAndChapter, beginVerse, endVerse } = parseUserVerseInput(userInput);
    if (settings.shouldCapitalizeBookNames) {
      bookAndChapter = capitalize(bookAndChapter);
    }
    if (settings.verifyFilesWhenLinking) {
      const { fileName, tFile } = getFileByFilename(app, bookAndChapter, "/", settings);
      if (!tFile) {
        new import_obsidian4.Notice(`File "${fileName}" does not exist and verify files is set to true`);
        throw `File ${fileName} does not exist, verify files = true`;
      }
    }
    if (beginVerse > endVerse) {
      new import_obsidian4.Notice("Begin verse is bigger than end verse");
      throw "Begin verse is bigger than end verse";
    }
    let res = "";
    for (let i = beginVerse; i <= endVerse; i++) {
      const beginning = getLinkBeginning(i, beginVerse, endVerse, linkType);
      const ending = getLinkEnding(i, beginVerse, endVerse, linkType, bookAndChapter, settings);
      res += `${beginning}[[${bookAndChapter}${settings.linkSeparator}${settings.versePrefix}${i}${ending}]]`;
      if (useNewLine) {
        res += "\n";
      }
    }
    return res;
  });
}
function getLinkBeginning(currentVerse, beginVerse, endVerse, linkType) {
  switch (linkType) {
    case LinkType2.Embedded:
      return "!";
    default:
      return "";
  }
}
function getLinkEnding(currentVerse, beginVerse, endVerse, linkType, bookAndChapter, settings) {
  switch (linkType) {
    case LinkType2.Invisible:
      return "|";
    case LinkType2.FirstAndLast: {
      if (beginVerse === endVerse) {
        return `|${bookAndChapter}${settings.oneVerseNotation}${currentVerse}`;
      } else if (currentVerse === beginVerse) {
        return `|${bookAndChapter}${settings.multipleVersesNotation}${currentVerse}`;
      }
      if (currentVerse === endVerse) {
        return `|-${currentVerse}`;
      }
      return "|";
    }
    default:
      return "";
  }
}
function getLinksForChapters(app, userInput, linkType, useNewLine, settings) {
  return __async(this, null, function* () {
    const { book, firstChapter, lastChapter } = parseUserBookInput(userInput);
    if (firstChapter > lastChapter) {
      new import_obsidian4.Notice("Begin chapter is bigger than end chapter");
      throw "Begin chapter is bigger than end chapter";
    }
    let res = "";
    for (let i = firstChapter; i <= lastChapter; i++) {
      res += `[[${book} ${i}]]`;
      if (useNewLine) {
        res += "\n";
      }
    }
    return res;
  });
}

// src/modals/link-verse-modal.ts
var LinkType2;
(function(LinkType3) {
  LinkType3["Basic"] = "Basic";
  LinkType3["Embedded"] = "Embedded";
  LinkType3["Invisible"] = "Invisible";
  LinkType3["FirstAndLast"] = "FirstAndLast";
})(LinkType2 || (LinkType2 = {}));
var LinkVerseModal = class extends import_obsidian5.Modal {
  constructor(app, settings, onSubmit) {
    super(app);
    this.handleInput = () => __async(this, null, function* () {
      try {
        const res = yield createLinks(this.app, this.userInput, this.linkType, this.useNewLine, this.pluginSettings);
        this.close();
        this.onSubmit(res);
      } catch (err) {
        return;
      }
    });
    this.onSubmit = onSubmit;
    this.pluginSettings = settings;
    this.linkType = this.pluginSettings.linkTypePreset;
    this.useNewLine = this.pluginSettings.newLinePreset;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", {
      text: "Create Obsidian links from Bible reference"
    });
    new import_obsidian5.Setting(contentEl).setName("Insert reference").addText((text) => text.onChange((value) => {
      this.userInput = value;
    }).inputEl.focus());
    new import_obsidian5.Setting(contentEl).setName("Link type").addDropdown((dropdown) => {
      dropdown.addOption(LinkType2.Basic, LinkType2.Basic);
      dropdown.addOption(LinkType2.Embedded, LinkType2.Embedded);
      dropdown.addOption(LinkType2.FirstAndLast, "Show First & Last");
      dropdown.addOption(LinkType2.Invisible, LinkType2.Invisible);
      dropdown.onChange((value) => this.linkType = value);
      dropdown.setValue(this.pluginSettings.linkTypePreset);
    });
    new import_obsidian5.Setting(contentEl).setName("Each link on new line?").addToggle((tgl) => {
      tgl.setValue(this.pluginSettings.newLinePreset);
      tgl.onChange((val) => {
        this.useNewLine = val;
      });
    });
    new import_obsidian5.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("Link").setCta().onClick(this.handleInput);
    });
    contentEl.onkeydown = (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        this.handleInput();
      }
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings.ts
var import_obsidian6 = __toModule(require("obsidian"));
var SettingsTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Copy and Link Bible verses command" });
    containerEl.createEl("h4", { text: "Functional" });
    new import_obsidian6.Setting(containerEl).setName("Verse offset").setDesc('Change this if wrong verses are being linked, e.g. you want "Gen 1,1-3" but output is text from verses 2-4 \u2192 set this to -1').setClass("important-setting").addText((inputBox) => inputBox.setValue(this.plugin.settings.verseOffset.toString()).onChange((value) => __async(this, null, function* () {
      const number = Number.parseInt(value);
      if (value === "-")
        return;
      if (Number.isNaN(number)) {
        new import_obsidian6.Notice("Invalid input, please insert valid integer");
        inputBox.setValue("");
        return;
      }
      this.plugin.settings.verseOffset = number;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Verse heading level").setDesc('If set, only headings of specified level are considered verses (if first heading of this level is always a verse, also set "Verse offset" to -1)').addDropdown((dropdown) => {
      var _a, _b;
      dropdown.addOption("any", "any");
      dropdown.addOption("6", "######");
      dropdown.addOption("5", "#####");
      dropdown.addOption("4", "####");
      dropdown.addOption("3", "###");
      dropdown.addOption("2", "##");
      dropdown.addOption("1", "#");
      dropdown.setValue((_b = (_a = this.plugin.settings.verseHeadingLevel) == null ? void 0 : _a.toString()) != null ? _b : "any");
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.verseHeadingLevel = value === "any" ? void 0 : Number(value);
        yield this.plugin.saveSettings();
      }));
    });
    containerEl.createEl("h4", { text: "Inserted prefixes/postfixes" });
    new import_obsidian6.Setting(containerEl).setName("Line prefix").setDesc("String inserted in front of every line, for example '>' for quote. Note: If you set 'Put each verse on a new line?' to true, the prefix will be inserted in front of every line.").setClass("important-setting").addText((inputBox) => inputBox.setPlaceholder("Insert prefix here").setValue(this.plugin.settings.prefix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.prefix = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Link postfix").setDesc("String inserted after biblical link, you can use \\n to insert newline.").addText((inputBox) => inputBox.setPlaceholder("Insert postfix here").setValue(this.plugin.settings.postfix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.postfix = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Each verse prefix").setDesc('String inserted in front of every copied verse. You can use "{n}" where you want number of given verse inserted, for example "**{n}** " will make each verse start with bold verse number. You can also use "{f}" to insert name of the corresponding file (for example to create obsidian links). Leave empty for no prefix.').addText((inputBox) => inputBox.setPlaceholder("Insert prefix here").setValue(this.plugin.settings.eachVersePrefix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.eachVersePrefix = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Links" });
    new import_obsidian6.Setting(containerEl).setName("Link to last verse?").setDesc("Should last verse be linked in the visible link before text of verses?").addToggle((toggle) => toggle.setValue(this.plugin.settings.linkEndVerse).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.linkEndVerse = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Add invisible links?").setDesc("Invisible links are added to each verse used (so you can find the connections later), they are only visible in source mode.").addToggle((toggle) => toggle.setValue(this.plugin.settings.useInvisibleLinks).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.useInvisibleLinks = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Link only default").setDesc("What the link only option should be set to by default").addToggle((toggle) => toggle.setValue(this.plugin.settings.linkOnly).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.linkOnly = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Output format" });
    new import_obsidian6.Setting(containerEl).setName("Put each verse on a new line?").setClass("important-setting").setDesc("Each verse is inserted on a new line (with Link prefix).").addToggle((toggle) => toggle.setValue(this.plugin.settings.newLines).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.newLines = value;
      yield this.plugin.saveSettings();
      this.display();
    })));
    if (this.plugin.settings.newLines) {
      new import_obsidian6.Setting(containerEl).setName("First line prefix").setDesc('Special prefix that will be inserted in front of the first line only, right after the "Line prefix". Handy for callouts. (Only applied when Put each verse on a new line? is set to true)').addText((inputBox) => inputBox.setPlaceholder("First line prefix").setValue(this.plugin.settings.firstLinePrefix).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.firstLinePrefix = value;
        yield this.plugin.saveSettings();
      })));
    } else {
      new import_obsidian6.Setting(containerEl).setName("Insert space between verses?").setDesc("Should space be inserted between verses? (Only applied when Put each verse on a new line? is set to false. Useful for languages such as Chinese.)").setDisabled(!this.plugin.settings.newLines).addToggle((toggle) => toggle.setValue(this.plugin.settings.insertSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.insertSpace = value;
        yield this.plugin.saveSettings();
      })));
    }
    containerEl.createEl("h4", { text: "Notation" });
    containerEl.createEl("p", { text: 'Also used in the link command when the "Show First & Last" link type is used.' });
    new import_obsidian6.Setting(containerEl).setName("One verse notation").setDesc('This is the symbol that will be used between chapter number and verse number when copying one verse. For example "." \u2192 Gen 1.1.').addText((inputBox) => inputBox.setPlaceholder("Insert notation symbol here").setValue(this.plugin.settings.oneVerseNotation).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.oneVerseNotation = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Multiple verses notation").setDesc('This is the symbol that will be used between chapter number and verse number when copying multiple verses. For example "," \u2192 Gen 1,1-3.').addText((inputBox) => inputBox.setPlaceholder("Insert notation symbol here").setValue(this.plugin.settings.multipleVersesNotation).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.multipleVersesNotation = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Multiple translations" });
    new import_obsidian6.Setting(containerEl).setName("Enable multiple translations").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableMultipleTranslations).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.enableMultipleTranslations = value;
      yield this.plugin.saveSettings();
      this.display();
    })));
    if (this.plugin.settings.enableMultipleTranslations) {
      new import_obsidian6.Setting(containerEl).setName("Paths to translations with their names").setDesc('Input full paths from the root vault folder to folders containing Bible translations, each translation on separate line. An example of one entry: "Bible/NIV/". The plugin will search for corresponding Bible files using given paths as starting points. Make sure there are no duplicate files in given paths, otherwise it is hard to tell what the output will be. The first translation will be considered your main translation.').addTextArea((inputBox) => inputBox.setPlaceholder("Bible/NIV/\nBible/ESV/").setValue(this.plugin.settings.translationsPaths).onChange((value) => __async(this, null, function* () {
        const inputPaths = value.split(/\r?\n|\r/);
        const paths = [];
        inputPaths.forEach((path) => {
          if (path.at(-1) !== "/") {
            paths.push(path + "/");
          } else {
            paths.push(path);
          }
        });
        this.plugin.settings.translationsPaths = value;
        this.plugin.settings.parsedTranslationPaths = paths;
        yield this.plugin.saveSettings();
      })));
      new import_obsidian6.Setting(containerEl).setName("What to link").setDesc("Choose what translations should be linked when copying a verse.").addDropdown((dropdown) => {
        dropdown.addOption("all", "Link to all translations");
        dropdown.addOption("used", "Link only to used translation");
        dropdown.addOption("usedAndMain", "Link to used and main translation");
        dropdown.addOption("main", "Link only to main translation");
        dropdown.setValue(this.plugin.settings.translationLinkingType);
        dropdown.onChange((value) => __async(this, null, function* () {
          this.plugin.settings.translationLinkingType = value;
          yield this.plugin.saveSettings();
        }));
      });
    }
    containerEl.createEl("h4", { text: "Comments" });
    containerEl.createEl("p", { text: "Use this if you have comments right in the Biblical text that you want to ignore when copying verses." });
    new import_obsidian6.Setting(containerEl).setName("Comment beginning").setDesc("String that is used to mark the beginning of a comment, won't be used if it is set to an empty string.").addText((inputBox) => inputBox.setPlaceholder("/*").setValue(this.plugin.settings.commentStart).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.commentStart = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Comment ending").setDesc("String that is used to mark the end of a comment, won't be used if it is set to an empty string.").addText((inputBox) => inputBox.setPlaceholder("*/").setValue(this.plugin.settings.commentEnd).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.commentEnd = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Convertors" });
    function parseStringToDictionary(input) {
      const dictionary = {};
      const normalizedInput = input.replace(/\r\n|\r/g, "\n");
      const lines = normalizedInput.split("\n");
      lines.forEach((line) => {
        if (line.includes(":")) {
          const [key, value] = line.split(":");
          if (key && value) {
            dictionary[key.toLowerCase()] = value;
          }
        }
      });
      return dictionary;
    }
    new import_obsidian6.Setting(containerEl).setName("Output book name convertor").setDesc(`You can specify conversions that will be applied to the visible book name alias. For example, if you put in "3J:3 John", the output will be changed from "[[3 John-01#v1|3J 1.1]]" to "[[3 John-01#v1|3 John 1.1]]". The format used is "From:To", each entry on it's own line. TIP: ChatGPT (or similar AI tool) will probably be able to help you when creating the input.`).setClass("big-text-area").addTextArea((inputBox) => inputBox.setPlaceholder("Gn:Genesis\nEx:Exodus\n...").setValue(this.plugin.settings.outputBookMapString).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.outputBookMapString = value;
      this.plugin.settings.outputBookMap = parseStringToDictionary(value);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Input book name convertor").setDesc(`You can specify conversions that will be applied to the used book name when searching for text of a verse. For example, if you put in "Gn:Gen", the input "Gn 1,1" will work even when the file is called "Gen 1,1". The format used is again "From:To", each entry on it's own line, and will be used by the plugin when the search fails using the unchanged input. Multiple entries can have same result mapping, for example you can use "G:Gen" and "Gn:Gen".`).setClass("big-text-area").addTextArea((inputBox) => inputBox.setPlaceholder("G:Gen\nGn:Gen\nL:Lk\n...").setValue(this.plugin.settings.inputBookMapString).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.inputBookMapString = value;
      this.plugin.settings.inputBookMap = parseStringToDictionary(value);
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h1", { text: "Link Bible verses command" });
    containerEl.createEl("h4", { text: "File format" });
    new import_obsidian6.Setting(containerEl).setName("Link separator").setDesc("This is the separator that will be used when linking, e.g. if you enter '#' here, output will be [[Gen 1#1]]. If you are using headings to mark verses, use '#'. If you are using block references, use '^'.").setClass("important-setting").addText((inputBox) => inputBox.setPlaceholder("Insert separator here").setValue(this.plugin.settings.linkSeparator).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.linkSeparator = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Verse prefix").setDesc('Fill this if you are using verse prefixes in your bible files, e.g. you have "v1" in your file \u2192 set to "v".').setClass("important-setting").addText((inputBox) => inputBox.setPlaceholder("Insert prefix here").setValue(this.plugin.settings.versePrefix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.versePrefix = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Defaults" });
    new import_obsidian6.Setting(containerEl).setName("Link type default value").setDesc("Value that will be selected by default in link modal.").addDropdown((dropdown) => {
      dropdown.addOption(LinkType2.Basic, LinkType2.Basic);
      dropdown.addOption(LinkType2.Embedded, LinkType2.Embedded);
      dropdown.addOption(LinkType2.FirstAndLast, "Show First & Last");
      dropdown.addOption(LinkType2.Invisible, LinkType2.Invisible);
      dropdown.setValue(this.plugin.settings.linkTypePreset);
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.linkTypePreset = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian6.Setting(containerEl).setName("Use new lines default value").setDesc("Value that will be selected by default in link modal.").addToggle((toggle) => toggle.setValue(this.plugin.settings.newLinePreset).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.newLinePreset = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Format" });
    new import_obsidian6.Setting(containerEl).setName("Capitalize book names?").setDesc('Should book names be automatically capitalized? For example "1cOr" will be turned into "1Cor".').addToggle((toggle) => toggle.setValue(this.plugin.settings.shouldCapitalizeBookNames).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.shouldCapitalizeBookNames = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Misc" });
    new import_obsidian6.Setting(containerEl).setName("Verify files?").setDesc("Verify existence of files you are trying to link, so that you are not inserting wrong references by mistake.").addToggle((toggle) => toggle.setValue(this.plugin.settings.verifyFilesWhenLinking).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.verifyFilesWhenLinking = value;
      yield this.plugin.saveSettings();
    })));
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  verseOffset: 0,
  verseHeadingLevel: void 0,
  prefix: "",
  postfix: "",
  eachVersePrefix: "",
  linkEndVerse: false,
  useInvisibleLinks: true,
  linkOnly: false,
  newLines: false,
  firstLinePrefix: "",
  insertSpace: true,
  oneVerseNotation: ".",
  multipleVersesNotation: ",",
  enableMultipleTranslations: false,
  translationsPaths: "",
  parsedTranslationPaths: [],
  translationLinkingType: "all",
  commentStart: "",
  commentEnd: "",
  outputBookMapString: "",
  outputBookMap: {},
  inputBookMapString: "",
  inputBookMap: {},
  linkSeparator: "#",
  versePrefix: "",
  linkTypePreset: LinkType2.Basic,
  newLinePreset: true,
  shouldCapitalizeBookNames: true,
  verifyFilesWhenLinking: false
};
function replaceRangeAndMoveCursor(str, editor) {
  editor.replaceRange(str, editor.getCursor());
  let offset = editor.posToOffset(editor.getCursor());
  offset += str.length;
  editor.setCursor(editor.offsetToPos(offset));
}
var BibleLinkerPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.openCopyModal = () => {
      var _a;
      const editor = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor;
      if (editor) {
        new CopyVerseModal(this.app, this.settings, (str) => replaceRangeAndMoveCursor(str, editor)).open();
      }
    };
    this.openObsidianLinkModal = () => {
      var _a;
      const editor = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor;
      if (editor) {
        new LinkVerseModal(this.app, this.settings, (str) => replaceRangeAndMoveCursor(str, editor)).open();
      }
    };
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new SettingsTab(this.app, this));
      this.addCommand({
        id: "insert-bible-link",
        name: "Copy and Link Bible verses",
        icon: "copy",
        editorCallback: this.openCopyModal
      });
      this.addCommand({
        id: "insert-bible-link-obsidian-link",
        name: "Link Bible verses",
        icon: "link",
        editorCallback: this.openObsidianLinkModal
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL21vZGFscy9jb3B5LXZlcnNlLW1vZGFsLnRzIiwgInNyYy9sb2dpYy9jb3B5LWNvbW1hbmQudHMiLCAic3JjL3V0aWxzL3JlZ2V4ZXMudHMiLCAic3JjL2xvZ2ljL2NvbW1vbi50cyIsICJzcmMvbW9kYWxzL2xpbmstdmVyc2UtbW9kYWwudHMiLCAic3JjL2xvZ2ljL2xpbmstY29tbWFuZC50cyIsICJzcmMvc2V0dGluZ3MudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7RWRpdG9yLCBQbHVnaW59IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IENvcHlWZXJzZU1vZGFsIGZyb20gJ3NyYy9tb2RhbHMvY29weS12ZXJzZS1tb2RhbCc7XHJcbmltcG9ydCBMaW5rVmVyc2VNb2RhbCwge0xpbmtUeXBlfSBmcm9tICcuL21vZGFscy9saW5rLXZlcnNlLW1vZGFsJztcclxuaW1wb3J0IHtTZXR0aW5nc1RhYn0gZnJvbSAnLi9zZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBsdWdpblNldHRpbmdzIHtcclxuICAgIC8vIENPUFlcclxuICAgIC8vIEZ1bmN0aW9uYWxcclxuICAgIHZlcnNlT2Zmc2V0OiBudW1iZXI7XHJcbiAgICB2ZXJzZUhlYWRpbmdMZXZlbD86IG51bWJlcjtcclxuXHJcbiAgICAvLyBJbnNlcnRlZCBwcmVmaXhlcy9wb3N0Zml4ZXNcclxuICAgIHByZWZpeDogc3RyaW5nO1xyXG4gICAgcG9zdGZpeDogc3RyaW5nO1xyXG4gICAgZWFjaFZlcnNlUHJlZml4OiBzdHJpbmc7XHJcblxyXG4gICAgLy8gTGlua3NcclxuICAgIGxpbmtFbmRWZXJzZTogYm9vbGVhbjtcclxuICAgIHVzZUludmlzaWJsZUxpbmtzOiBib29sZWFuO1xyXG4gICAgbGlua09ubHk6IGJvb2xlYW47XHJcblxyXG4gICAgLy8gT3V0cHV0IGZvcm1hdFxyXG4gICAgbmV3TGluZXM6IGJvb2xlYW47XHJcblx0Zmlyc3RMaW5lUHJlZml4OiBzdHJpbmc7XHJcbiAgICBpbnNlcnRTcGFjZTogYm9vbGVhbjtcclxuXHJcbiAgICAvLyBOb3RhdGlvblxyXG4gICAgb25lVmVyc2VOb3RhdGlvbjogc3RyaW5nO1xyXG4gICAgbXVsdGlwbGVWZXJzZXNOb3RhdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIC8vIE11bHRpcGxlIHRyYW5zbGF0aW9uc1xyXG4gICAgZW5hYmxlTXVsdGlwbGVUcmFuc2xhdGlvbnM6IGJvb2xlYW47XHJcbiAgICB0cmFuc2xhdGlvbnNQYXRoczogc3RyaW5nO1xyXG4gICAgcGFyc2VkVHJhbnNsYXRpb25QYXRoczogc3RyaW5nW107IC8vIGNhbGxjdWxhdGVkIGZyb20gdHJhbnNsYXRpb25zIHBhdGhzLCBub3Qgc2hvd24gdG8gdGhlIHVzZXJcclxuICAgIHRyYW5zbGF0aW9uTGlua2luZ1R5cGU6IHN0cmluZztcclxuXHJcblx0Ly8gQ29tbWVudHNcclxuXHRjb21tZW50U3RhcnQ6IHN0cmluZyxcclxuXHRjb21tZW50RW5kOiBzdHJpbmcsXHJcblxyXG5cdC8vIENvbnZlcnRvcnNcclxuXHRvdXRwdXRCb29rTWFwU3RyaW5nOiBzdHJpbmcsXHJcblx0b3V0cHV0Qm9va01hcDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfVxyXG5cdGlucHV0Qm9va01hcFN0cmluZzogc3RyaW5nLFxyXG5cdGlucHV0Qm9va01hcDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfVxyXG5cclxuICAgIC8vIExJTktcclxuICAgIC8vIEZpbGUgZm9ybWF0XHJcbiAgICBsaW5rU2VwYXJhdG9yOiBzdHJpbmc7XHJcbiAgICB2ZXJzZVByZWZpeDogc3RyaW5nO1xyXG5cclxuICAgIC8vIERlZmF1bHRzXHJcbiAgICBsaW5rVHlwZVByZXNldDogTGlua1R5cGU7XHJcbiAgICBuZXdMaW5lUHJlc2V0OiBib29sZWFuO1xyXG5cclxuXHQvLyBGb3JtYXRcclxuXHRzaG91bGRDYXBpdGFsaXplQm9va05hbWVzOiBib29sZWFuO1xyXG5cclxuXHQvLyBNaXNjXHJcblx0dmVyaWZ5RmlsZXNXaGVuTGlua2luZzogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUGFydGlhbDxQbHVnaW5TZXR0aW5ncz4gPSB7XHJcbiAgICAvLyBDT1BZXHJcbiAgICAvLyBGdW5jdGlvbmFsXHJcbiAgICB2ZXJzZU9mZnNldDogMCxcclxuICAgIHZlcnNlSGVhZGluZ0xldmVsOiB1bmRlZmluZWQsXHJcblxyXG4gICAgLy8gSW5zZXJ0ZWQgcHJlZml4ZXMvcG9zdGZpeGVzXHJcbiAgICBwcmVmaXg6IFwiXCIsXHJcbiAgICBwb3N0Zml4OiBcIlwiLFxyXG4gICAgZWFjaFZlcnNlUHJlZml4OiBcIlwiLFxyXG5cclxuICAgIC8vIExpbmtzXHJcbiAgICBsaW5rRW5kVmVyc2U6IGZhbHNlLFxyXG4gICAgdXNlSW52aXNpYmxlTGlua3M6IHRydWUsXHJcbiAgICBsaW5rT25seTogZmFsc2UsXHJcblxyXG4gICAgLy8gT3V0cHV0IGZvcm1hdFxyXG4gICAgbmV3TGluZXM6IGZhbHNlLFxyXG5cdGZpcnN0TGluZVByZWZpeDogXCJcIixcclxuICAgIGluc2VydFNwYWNlOiB0cnVlLFxyXG5cclxuICAgIC8vIE5vdGF0aW9uXHJcbiAgICBvbmVWZXJzZU5vdGF0aW9uOiBcIi5cIixcclxuICAgIG11bHRpcGxlVmVyc2VzTm90YXRpb246IFwiLFwiLFxyXG5cclxuICAgIC8vIE11bHRpcGxlIHRyYW5zbGF0aW9uc1xyXG4gICAgZW5hYmxlTXVsdGlwbGVUcmFuc2xhdGlvbnM6IGZhbHNlLFxyXG4gICAgdHJhbnNsYXRpb25zUGF0aHM6IFwiXCIsXHJcbiAgICBwYXJzZWRUcmFuc2xhdGlvblBhdGhzOiBbXSxcclxuICAgIHRyYW5zbGF0aW9uTGlua2luZ1R5cGU6IFwiYWxsXCIsXHJcblxyXG5cdC8vIENvbW1lbnRzXHJcblx0Y29tbWVudFN0YXJ0OiBcIlwiLFxyXG5cdGNvbW1lbnRFbmQ6IFwiXCIsXHJcblxyXG5cdC8vIENvbnZlcnRvcnNcclxuXHRvdXRwdXRCb29rTWFwU3RyaW5nOiBcIlwiLFxyXG5cdG91dHB1dEJvb2tNYXA6IHt9LFxyXG5cdGlucHV0Qm9va01hcFN0cmluZzogXCJcIixcclxuXHRpbnB1dEJvb2tNYXA6IHt9LFxyXG5cclxuICAgIC8vIExJTktcclxuICAgIC8vIEZpbGUgZm9ybWF0XHJcbiAgICBsaW5rU2VwYXJhdG9yOiBcIiNcIixcclxuICAgIHZlcnNlUHJlZml4OiBcIlwiLFxyXG5cclxuICAgIC8vIERlZmF1bHRzXHJcbiAgICBsaW5rVHlwZVByZXNldDogTGlua1R5cGUuQmFzaWMsXHJcbiAgICBuZXdMaW5lUHJlc2V0OiB0cnVlLFxyXG5cclxuXHQvLyBGb3JtYXRcclxuXHRzaG91bGRDYXBpdGFsaXplQm9va05hbWVzOiB0cnVlLFxyXG5cclxuXHQvLyBNaXNjXHJcblx0dmVyaWZ5RmlsZXNXaGVuTGlua2luZzogZmFsc2UsXHJcbn07XHJcblxyXG5cclxuZnVuY3Rpb24gcmVwbGFjZVJhbmdlQW5kTW92ZUN1cnNvcihzdHI6IHN0cmluZywgZWRpdG9yOiBFZGl0b3IpIHtcclxuXHRlZGl0b3IucmVwbGFjZVJhbmdlKHN0ciwgZWRpdG9yLmdldEN1cnNvcigpKTtcclxuXHRsZXQgb2Zmc2V0ID0gZWRpdG9yLnBvc1RvT2Zmc2V0KGVkaXRvci5nZXRDdXJzb3IoKSlcclxuXHRvZmZzZXQgKz0gc3RyLmxlbmd0aDtcclxuXHRlZGl0b3Iuc2V0Q3Vyc29yKGVkaXRvci5vZmZzZXRUb1BvcyhvZmZzZXQpKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmlibGVMaW5rZXJQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gICAgc2V0dGluZ3M6IFBsdWdpblNldHRpbmdzO1xyXG5cclxuICAgIC8vIE9wZW5zIG1vZGFsIGZvciB0ZXh0IGNvcHlpbmdcclxuICAgIG9wZW5Db3B5TW9kYWwgPSAoKSA9PiB7XHJcblx0XHRjb25zdCBlZGl0b3IgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlRWRpdG9yPy5lZGl0b3JcclxuICAgICAgICBpZiAoZWRpdG9yKSB7XHJcbiAgICAgICAgICAgIG5ldyBDb3B5VmVyc2VNb2RhbCh0aGlzLmFwcCwgdGhpcy5zZXR0aW5ncyxcclxuICAgICAgICAgICAgICAgIChzdHIpID0+IHJlcGxhY2VSYW5nZUFuZE1vdmVDdXJzb3Ioc3RyLCBlZGl0b3IpXHJcblx0XHRcdCkub3BlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBPcGVucyBtb2RhbCBmb3IgY3JlYXRpbmcgb2JzaWRpYW4gbGlua3NcclxuICAgIG9wZW5PYnNpZGlhbkxpbmtNb2RhbCA9ICgpID0+IHtcclxuXHRcdGNvbnN0IGVkaXRvciA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmVkaXRvclxyXG4gICAgICAgIGlmIChlZGl0b3IpIHtcclxuICAgICAgICAgICAgbmV3IExpbmtWZXJzZU1vZGFsKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgKHN0cikgPT4gcmVwbGFjZVJhbmdlQW5kTW92ZUN1cnNvcihzdHIsIGVkaXRvcilcclxuXHRcdFx0KS5vcGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSlcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJ1biBvbmNlIHdoZW4gcGx1Z2luIGlzIGxvYWRlZFxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIC8vIEhhbmRsZSBzZXR0aW5nc1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTZXR0aW5nc1RhYih0aGlzLmFwcCwgdGhpcykpXHJcblxyXG4gICAgICAgIC8vIEFkZCBpY29uIHRvIGluc2VydCBsaW5rIFxyXG4gICAgICAgIC8vIHRoaXMuYWRkUmliYm9uSWNvbihcImxpbmtcIiwgXCJJbnNlcnQgYmlibGUgbGlua1wiLCAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB0aGlzLm9wZW5Db3B5TW9kYWwoKSk7XHJcblxyXG4gICAgICAgIC8vIENvbW1hbmQgdG8gaW5zZXJ0IGxpbmsgKG9ubHkgYXZhaWxhYmxlIGluIGVkaXRvciBtb2RlKVxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiAnaW5zZXJ0LWJpYmxlLWxpbmsnLCAvLyBJRCBsZWZ0IHRvIHByZXNlcnZlIHVzZXIncyBrZXkgbWFwcGluZ3NcclxuICAgICAgICAgICAgbmFtZTogXCJDb3B5IGFuZCBMaW5rIEJpYmxlIHZlcnNlc1wiLFxyXG4gICAgICAgICAgICBpY29uOiBcImNvcHlcIixcclxuICAgICAgICAgICAgZWRpdG9yQ2FsbGJhY2s6IHRoaXMub3BlbkNvcHlNb2RhbFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIENvbW1hbmQgdG8gaW5zZXJ0IGxpbmsgKG9ubHkgYXZhaWxhYmxlIGluIGVkaXRvciBtb2RlKVxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiAnaW5zZXJ0LWJpYmxlLWxpbmstb2JzaWRpYW4tbGluaycsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiTGluayBCaWJsZSB2ZXJzZXNcIixcclxuICAgICAgICAgICAgaWNvbjogXCJsaW5rXCIsXHJcbiAgICAgICAgICAgIGVkaXRvckNhbGxiYWNrOiB0aGlzLm9wZW5PYnNpZGlhbkxpbmtNb2RhbFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCwgQnV0dG9uQ29tcG9uZW50LCBNb2RhbCwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBQbHVnaW5TZXR0aW5ncyB9IGZyb20gXCIuLi9tYWluXCI7XHJcbmltcG9ydCB7IGdldFRleHRPZlZlcnNlcyB9IGZyb20gXCIuLi9sb2dpYy9jb3B5LWNvbW1hbmRcIjtcclxuXHJcbi8qKlxyXG4gKiBBc3luYyBmdW5jdGlvbiBmb3IgZmV0Y2hpbmcgcHJldmlld1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0UHJldmlld1RleHQoXHJcblx0cHJldmlld0VsOiBIVE1MVGV4dEFyZWFFbGVtZW50LFxyXG5cdHVzZXJJbnB1dDogc3RyaW5nLFxyXG5cdHBsdWdpblNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncyxcclxuXHR0cmFuc2xhdGlvblBhdGg6IHN0cmluZyxcclxuXHRsaW5rT25seTogYm9vbGVhblxyXG4pIHtcclxuXHR0cnkge1xyXG5cdFx0Y29uc3QgcmVzID0gYXdhaXQgZ2V0VGV4dE9mVmVyc2VzKFxyXG5cdFx0XHR0aGlzLmFwcCxcclxuXHRcdFx0dXNlcklucHV0LFxyXG5cdFx0XHRwbHVnaW5TZXR0aW5ncyxcclxuXHRcdFx0dHJhbnNsYXRpb25QYXRoLFxyXG5cdFx0XHRsaW5rT25seSxcclxuXHRcdFx0ZmFsc2VcclxuXHRcdCk7XHJcblx0XHRwcmV2aWV3RWwuc2V0VGV4dChyZXMpO1xyXG5cdH0gY2F0Y2gge1xyXG5cdFx0cHJldmlld0VsLnNldFRleHQoXCJcIik7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZW51bSBMaW5rVHlwZSB7XHJcblx0Rmlyc3QgPSBcIkZpcnN0IHZlcnNlXCIsXHJcblx0Rmlyc3RPdGhlckludmlzID0gXCJGaXJzdCB2ZXJzZSArIG90aGVyIGludmlzaWJsZVwiLFxyXG5cdEZpcnN0TGFzdCA9IFwiRmlyc3QgYW5kIGxhc3QgdmVyc2VcIixcclxuXHRGaXJzdExhc3RPdGhlckludmlzID0gXCJGaXJzdCBhbmQgbGFzdCArIG90aGVyIGludmlzaWJsZVwiLFxyXG5cdEFsbCA9IFwiQWxsIHZlcnNlc1wiLFxyXG5cdEFsbEludmlzID0gXCJBbGwgdmVyc2VzLCBpbnZpc2libGVcIixcclxufVxyXG5cclxuLyoqXHJcbiAqIE1vZGFsIHRoYXQgbGV0cyB5b3UgaW5zZXJ0IGJpYmxlIHJlZmVyZW5jZSBieSBjb3B5aW5nIHRleHQgb2YgZ2l2ZW4gdmVyc2VzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb3B5VmVyc2VNb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuXHR1c2VySW5wdXQ6IHN0cmluZztcclxuXHRvblN1Ym1pdDogKHJlc3VsdDogc3RyaW5nKSA9PiB2b2lkO1xyXG5cdHBsdWdpblNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncztcclxuXHR0cmFuc2xhdGlvblBhdGg6IHN0cmluZztcclxuXHRsaW5rT25seTogYm9vbGVhbjtcclxuXHJcblx0aGFuZGxlSW5wdXQgPSBhc3luYyAoKSA9PiB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRjb25zdCByZXMgPSBhd2FpdCBnZXRUZXh0T2ZWZXJzZXMoXHJcblx0XHRcdFx0dGhpcy5hcHAsXHJcblx0XHRcdFx0dGhpcy51c2VySW5wdXQsXHJcblx0XHRcdFx0dGhpcy5wbHVnaW5TZXR0aW5ncyxcclxuXHRcdFx0XHR0aGlzLnRyYW5zbGF0aW9uUGF0aCxcclxuXHRcdFx0XHR0aGlzLmxpbmtPbmx5XHJcblx0XHRcdCk7XHJcblx0XHRcdHRoaXMuY2xvc2UoKTtcclxuXHRcdFx0dGhpcy5vblN1Ym1pdChyZXMpO1xyXG5cdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdGFwcDogQXBwLFxyXG5cdFx0c2V0dGluZ3M6IFBsdWdpblNldHRpbmdzLFxyXG5cdFx0b25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZFxyXG5cdCkge1xyXG5cdFx0c3VwZXIoYXBwKTtcclxuXHRcdHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcclxuXHRcdHRoaXMucGx1Z2luU2V0dGluZ3MgPSBzZXR0aW5ncztcclxuXHR9XHJcblxyXG5cdG9uT3BlbigpIHtcclxuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cdFx0bGV0IHByZXZpZXdFbDogSFRNTFRleHRBcmVhRWxlbWVudDtcclxuXHJcblx0XHRjb25zdCByZWZyZXNoUHJldmlldyA9ICgpID0+IHtcclxuXHRcdFx0c2V0UHJldmlld1RleHQoXHJcblx0XHRcdFx0cHJldmlld0VsLFxyXG5cdFx0XHRcdHRoaXMudXNlcklucHV0LFxyXG5cdFx0XHRcdHRoaXMucGx1Z2luU2V0dGluZ3MsXHJcblx0XHRcdFx0dGhpcy50cmFuc2xhdGlvblBhdGgsXHJcblx0XHRcdFx0dGhpcy5saW5rT25seVxyXG5cdFx0XHQpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBBZGQgaGVhZGluZ1xyXG5cdFx0Y29udGVudEVsLmNyZWF0ZUVsKFwiaDNcIiwgeyB0ZXh0OiBcIkNvcHkgdmVyc2UgYnkgYmlibGUgcmVmZXJlbmNlXCIgfSk7XHJcblxyXG5cdFx0Ly8gQWRkIFRleHRib3ggZm9yIHJlZmVyZW5jZVxyXG5cdFx0bmV3IFNldHRpbmcoY29udGVudEVsKS5zZXROYW1lKFwiSW5zZXJ0IHJlZmVyZW5jZVwiKS5hZGRUZXh0KCh0ZXh0KSA9PlxyXG5cdFx0XHR0ZXh0XHJcblx0XHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy51c2VySW5wdXQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdHJlZnJlc2hQcmV2aWV3KCk7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHQuaW5wdXRFbC5mb2N1cygpXHJcblx0XHQpOyAvLyBTZXRzIGZvY3VzIHRvIGlucHV0IGZpZWxkXHJcblxyXG5cdFx0Ly8gQWRkIHRyYW5zbGF0aW9uIHBpY2tlclxyXG5cdFx0aWYgKFxyXG5cdFx0XHR0aGlzLnBsdWdpblNldHRpbmdzLmVuYWJsZU11bHRpcGxlVHJhbnNsYXRpb25zICYmXHJcblx0XHRcdHRoaXMucGx1Z2luU2V0dGluZ3MudHJhbnNsYXRpb25zUGF0aHMgIT09IFwiXCJcclxuXHRcdCkge1xyXG5cdFx0XHRjb25zdCB0cmFuc2F0aW9uUGlja2VyID0gbmV3IFNldHRpbmcoY29udGVudEVsKS5zZXROYW1lKFxyXG5cdFx0XHRcdFwiUGljayB0cmFuc2xhdGlvblwiXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHRsZXQgYnV0dG9uczogQnV0dG9uQ29tcG9uZW50W10gPSBbXTtcclxuXHRcdFx0bGV0IGJ1dHRvblBhdGhNYXAgPSBuZXcgTWFwPEJ1dHRvbkNvbXBvbmVudCwgc3RyaW5nPigpO1xyXG5cclxuXHRcdFx0dGhpcy5wbHVnaW5TZXR0aW5ncy5wYXJzZWRUcmFuc2xhdGlvblBhdGhzLmZvckVhY2goKHBhdGgpID0+IHtcclxuXHRcdFx0XHQvLyBkaXNwbGF5IHRyYW5zbGF0aW9uIGJ1dHRvbnNcclxuXHRcdFx0XHR0cmFuc2F0aW9uUGlja2VyLmFkZEJ1dHRvbigoYnRuKSA9PiB7XHJcblx0XHRcdFx0XHRidXR0b25zLnB1c2goYnRuKTtcclxuXHRcdFx0XHRcdGJ1dHRvblBhdGhNYXAuc2V0KGJ0biwgcGF0aCk7XHJcblx0XHRcdFx0XHRsZXQgc3BsaXR0ZWRQYXRoID0gcGF0aC5zcGxpdChcIi9cIik7XHJcblx0XHRcdFx0XHRidG4uc2V0QnV0dG9uVGV4dChzcGxpdHRlZFBhdGhbc3BsaXR0ZWRQYXRoLmxlbmd0aCAtIDJdKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0YnV0dG9ucy5mb3JFYWNoKChidG4pID0+IHtcclxuXHRcdFx0XHRcdC8vIG1ha2Ugc3VyZSB0aGF0IG9ubHkgb25lIGlzIHNlbGVjdGVkIGF0IGEgdGltZVxyXG5cdFx0XHRcdFx0YnRuLm9uQ2xpY2soKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRidXR0b25zLmZvckVhY2goKGIpID0+IGIucmVtb3ZlQ3RhKCkpOyAvLyByZW1vdmUgQ1RBIGZyb20gYWxsIGJ1dHRvbnNcclxuXHRcdFx0XHRcdFx0YnRuLnNldEN0YSgpOyAvLyBzZXQgQ1RBIHRvIHRoaXMgYnV0dG9uXHJcblx0XHRcdFx0XHRcdHRoaXMudHJhbnNsYXRpb25QYXRoID0gYnV0dG9uUGF0aE1hcC5nZXQoYnRuKTtcclxuXHRcdFx0XHRcdFx0cmVmcmVzaFByZXZpZXcoKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvLyBwcmVzZWxlY3QgdGhlIGZpcnN0IGJ1dHRvbi90cm5hc2xhdGlvblxyXG5cdFx0XHRcdGJ1dHRvbnMuZmlyc3QoKS5zZXRDdGEoKTtcclxuXHRcdFx0XHR0aGlzLnRyYW5zbGF0aW9uUGF0aCA9IGJ1dHRvblBhdGhNYXAuZ2V0KGJ1dHRvbnMuZmlyc3QoKSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFkZCBsaW5rLW9ubHkgb3B0aW9uc1xyXG5cdFx0dGhpcy5saW5rT25seSA9IHRoaXMucGx1Z2luU2V0dGluZ3MubGlua09ubHk7XHJcblx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpLnNldE5hbWUoXCJMaW5rIG9ubHlcIikuYWRkVG9nZ2xlKCh0Z2wpID0+IHtcclxuXHRcdFx0dGdsLnNldFZhbHVlKHRoaXMucGx1Z2luU2V0dGluZ3MubGlua09ubHkpO1xyXG5cdFx0XHR0Z2wub25DaGFuZ2UoKHZhbCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMubGlua09ubHkgPSB2YWw7XHJcblx0XHRcdFx0cmVmcmVzaFByZXZpZXcoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBBZGQgcHJldmlld1xyXG5cdFx0Y29udGVudEVsLmNyZWF0ZUVsKFwibGFiZWxcIiwgeyB0ZXh0OiBcIlByZXZpZXdcIiB9KTtcclxuXHRcdHByZXZpZXdFbCA9IGNvbnRlbnRFbC5jcmVhdGVFbChcInRleHRhcmVhXCIsIHtcclxuXHRcdFx0Y2xzOiBcImNvcHktcHJldmlld1wiLFxyXG5cdFx0XHRhdHRyOiB7IHJlYWRvbmx5OiB0cnVlIH0sXHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBBZGQgYnV0dG9uIGZvciBzdWJtaXQvZXhpdFxyXG5cdFx0bmV3IFNldHRpbmcoY29udGVudEVsKS5hZGRCdXR0b24oKGJ0bikgPT4ge1xyXG5cdFx0XHRidG4uc2V0QnV0dG9uVGV4dChcIkxpbmtcIikuc2V0Q3RhKCkub25DbGljayh0aGlzLmhhbmRsZUlucHV0KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIEFsbG93IHVzZXIgdG8gZXhpdCB1c2luZyBFbnRlciBrZXlcclxuXHRcdGNvbnRlbnRFbC5vbmtleWRvd24gPSAoZXZlbnQpID0+IHtcclxuXHRcdFx0aWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XHJcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHR0aGlzLmhhbmRsZUlucHV0KCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRvbkNsb3NlKCkge1xyXG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCwgSGVhZGluZ0NhY2hlLCBOb3RpY2UsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IFBsdWdpblNldHRpbmdzIH0gZnJvbSBcIi4uL21haW5cIjtcclxuaW1wb3J0IHtib29rQW5kQ2hhcHRlclJlZ0V4LCBlc2NhcGVGb3JSZWdleCwgaXNPQlNLRmlsZVJlZ0V4fSBmcm9tIFwiLi4vdXRpbHMvcmVnZXhlc1wiO1xyXG5pbXBvcnQgeyBjYXBpdGFsaXplLCBnZXRGaWxlQnlGaWxlbmFtZSBhcyBnZXRURmlsZUJ5RmlsZW5hbWUsIHBhcnNlVXNlclZlcnNlSW5wdXQgfSBmcm9tIFwiLi9jb21tb25cIjtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBiaWJsaWNhbCByZWZlcmVuY2UgdG8gdGV4dCBvZiBnaXZlbiB2ZXJzZXNcclxuICogQHBhcmFtIGFwcCBBcHAgaW5zdGFuY2VcclxuICogQHBhcmFtIHVzZXJJbnB1dCBVc2VyIElucHV0IChsaW5rIHRvIHZlcnNlKVxyXG4gKiBAcGFyYW0gc2V0dGluZ3MgUGx1Z2luIHNldHRpbmdzXHJcbiAqIEBwYXJhbSB0cmFuc2xhdGlvblBhdGggUGF0aCB0byB0cmFuc2xhdGlvbiB0aGF0IHNob3VsZCBiZSB1c2VkXHJcbiAqIEBwYXJhbSBsaW5rT25seSBXaGV0aGVyIHRvIGluc2VydCBvdXRwdXQgb25seSBsaW5rIG9yIGFsc28gaW5jbHVkZSB0ZXh0XHJcbiAqIEBwYXJhbSB2ZXJib3NlIFdoZXRoZXIgb3Igbm90IHVzZXIgc2hvdWxkIGJlIG5vdGlmaWVkIGlmIHRoZSBsaW5rIGlzIGluY29ycmVjdFxyXG4gKiBAcmV0dXJucyBTdHJpbmcgd2l0aCBxdW90ZSBvZiBsaW5rZWQgdmVyc2VzLiBJZiBjb252ZXJ0aW5nIHdhcyBub3Qgc3VjY2Vzc2Z1bCwgcmV0dXJucyBlbXB0eSBzdHJpbmcuXHJcbiAqIEB2ZXJib3NlIERldGVybWluZXMgaWYgTm90aWNlcyB3aWxsIGJlIHNob3duIG9yIG5vdFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRleHRPZlZlcnNlcyhhcHA6IEFwcCwgdXNlcklucHV0OiBzdHJpbmcsIHNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncywgdHJhbnNsYXRpb25QYXRoOiBzdHJpbmcsIGxpbmtPbmx5OiBib29sZWFuLCB2ZXJib3NlID0gdHJ1ZSk6IFByb21pc2U8c3RyaW5nPiB7XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxyXG4gICAgbGV0IHsgYm9va0FuZENoYXB0ZXIsIGJlZ2luVmVyc2UsIGVuZFZlcnNlIH0gPSBwYXJzZVVzZXJWZXJzZUlucHV0KHVzZXJJbnB1dCwgdmVyYm9zZSk7XHJcbiAgICBib29rQW5kQ2hhcHRlciA9IGNhcGl0YWxpemUoYm9va0FuZENoYXB0ZXIpIC8vIEZvciBvdXRwdXQgY29uc2lzdGVuY3lcclxuICAgIGNvbnN0IHsgZmlsZU5hbWUsIHRGaWxlIH0gPSBnZXRURmlsZUJ5RmlsZW5hbWUoYXBwLCBib29rQW5kQ2hhcHRlciwgdHJhbnNsYXRpb25QYXRoLCBzZXR0aW5ncyk7XHJcbiAgICBpZiAodEZpbGUpIHtcclxuICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlQ29weU91dHB1dChhcHAsIHRGaWxlLCBmaWxlTmFtZSwgYmVnaW5WZXJzZSwgZW5kVmVyc2UsIHNldHRpbmdzLCB0cmFuc2xhdGlvblBhdGgsIGxpbmtPbmx5LCB2ZXJib3NlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHZlcmJvc2UpIHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgRmlsZSAke2Jvb2tBbmRDaGFwdGVyfSBub3QgZm91bmRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgXCJGaWxlIG5vdCBmb3VuZFwiXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRleHQgb2YgZ2l2ZW4gdmVyc2UgdXNpbmcgZ2l2ZW4gaGVhZGluZ3MgYW5kIGxpbmVzLlxyXG4gKiBAcGFyYW0gdmVyc2VOdW1iZXIgTnVtYmVyIG9mIGRlc2lyZWQgdmVyc2UuXHJcbiAqIEBwYXJhbSBoZWFkaW5ncyBMaXN0IG9mIGhlYWRpbmdzIHRoYXQgc2hvdWxkIGJlIHNlYXJjaGVkLiBTZWNvbmQgaGVhZGluZyBtdXN0IGNvcnJlc3BvbmQgdG8gZmlyc3QgdmVyc2UsIHRoaXJkIGhlYWRpbmcgdG8gc2Vjb25kIHZlcnNlIGFuZCBzbyBvbi5cclxuICogQHBhcmFtIGxpbmVzIExpbmVzIG9mIGZpbGUgZnJvbSB3aGljaCB2ZXJzZSB0ZXh0IHNob3VsZCBiZSB0YWtlbi5cclxuICogQHBhcmFtIGtlZXBOZXdsaW5lcyBJZiBzZXQgdG8gdHJ1ZSwgdGV4dCB3aWxsIGNvbnRhaW4gbmV3bGluZXMgaWYgcHJlc2VudCBpbiBzb3VyY2UsIGlmIHNldCB0byBmYWxzZSwgbmV3bGluZXMgd2lsbCBiZSBjaGFuZ2VkIHRvIHNwYWNlc1xyXG4gKiBAcGFyYW0gbmV3TGluZVByZWZpeCBQcmVmaXggZm9yIGVhY2ggbGluZSBvZiB2ZXJzZSwgaWYgdmVyc2UgaXMgbXVsdGlsaW5lIGFuZCBrZWVwTmV3TGluZXMgPSB0cnVlXHJcbiAqIEByZXR1cm5zIFRleHQgb2YgZ2l2ZW4gdmVyc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRWZXJzZVRleHQodmVyc2VOdW1iZXI6IG51bWJlciwgaGVhZGluZ3M6IEhlYWRpbmdDYWNoZVtdLCBsaW5lczogc3RyaW5nW10sIGtlZXBOZXdsaW5lczogYm9vbGVhbiwgbmV3TGluZVByZWZpeDogc3RyaW5nKSB7XHJcbiAgICBpZiAodmVyc2VOdW1iZXIgPj0gaGVhZGluZ3MubGVuZ3RoKSB7IC8vIG91dCBvZiByYW5nZVxyXG4gICAgICAgIG5ldyBOb3RpY2UoXCJWZXJzZSBvdXQgb2YgcmFuZ2UgZm9yIGdpdmVuIGZpbGVcIilcclxuICAgICAgICB0aHJvdyBgVmVyc2VOdW1iZXIgJHt2ZXJzZU51bWJlcn0gaXMgb3V0IG9mIHJhbmdlIG9mIGhlYWRpbmdzIHdpdGggbGVuZ3RoICR7aGVhZGluZ3MubGVuZ3RofWBcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoZWFkaW5nTGluZSA9IGhlYWRpbmdzW3ZlcnNlTnVtYmVyXS5wb3NpdGlvbi5zdGFydC5saW5lO1xyXG4gICAgaWYgKGhlYWRpbmdMaW5lICsgMSA+PSBsaW5lcy5sZW5ndGgpIHsgLy8gb3V0IG9mIHJhbmdlXHJcbiAgICAgICAgbmV3IE5vdGljZShcIkxvZ2ljYWwgZXJyb3IgLSBwbGVhc2UgY3JlYXRlIGlzc3VlIG9uIHBsdWdpbidzIEdpdEh1YiB3aXRoIHlvdXIgaW5wdXQgYW5kIHRoZSBmaWxlIHlvdSB3ZXJlIHJlZmVyZW5jaW5nLiBUaGFuayB5b3UhXCIpXHJcbiAgICAgICAgdGhyb3cgYEhlYWRpbmdMaW5lICR7aGVhZGluZ0xpbmUgKyAxfSBpcyBvdXQgb2YgcmFuZ2Ugb2YgbGluZXMgd2l0aCBsZW5ndGggJHtsaW5lc31gXHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhpcyBwYXJ0IGlzIG5lY2Vzc2FyeSBmb3IgdmVyc2VzIHRoYXQgc3BhbiBvdmVyIG11bHRpcGxlIGxpbmVzXHJcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcclxuICAgIGxldCBsaW5lID0gXCJcIjtcclxuICAgIGxldCBpID0gMTtcclxuICAgIGxldCBpc0ZpcnN0ID0gdHJ1ZTtcclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIGxpbmUgPSBsaW5lc1toZWFkaW5nTGluZSArIGldOyAvLyBnZXQgbmV4dCBsaW5lXHJcbiAgICAgICAgaWYgKC9eIy8udGVzdChsaW5lKSB8fCAoIWxpbmUgJiYgIWlzRmlyc3QpKSB7XHJcbiAgICAgICAgICAgIGJyZWFrOyAvLyBoZWFkaW5nIGxpbmUgKG5leHQgdmVyc2UpIG9yIGVtcHR5IGxpbmUgYWZ0ZXIgdmVyc2UgPT4gZG8gbm90IGNvbnRpbnVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGkrKztcclxuICAgICAgICBpZiAobGluZSkgeyAvLyBpZiBsaW5lIGhhcyBjb250ZW50IChpcyBub3QgZW1wdHkgc3RyaW5nKVxyXG4gICAgICAgICAgICBpZiAoIWlzRmlyc3QpIHsgLy8gSWYgaXQgaXMgbm90IGZpcnN0IGxpbmUgb2YgdGhlIHZlcnNlLCBhZGQgZGl2aWRlclxyXG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGtlZXBOZXdsaW5lcyA/IGBcXG4ke25ld0xpbmVQcmVmaXh9YCA6IFwiIFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlzRmlyc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgb3V0cHV0ICs9IGxpbmU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcGxhY2VzIFwiXFxuXCIgd2l0aCBuZXdsaW5lIGNoYXJhY3RlciBpbiBnaXZlbiBzdHJpbmcgKHdoZW4gdXNlciBpbnB1dHMgXCJcXG5cIiBpbiB0aGUgc2V0dGluZ3MgaXQgaXMgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gXCJcXFxcblwiIGFuZCBkb2VzIG5vdCB3b3JrIGFzIG5ld2xpbmUpXHJcbiAqL1xyXG5mdW5jdGlvbiByZXBsYWNlTmV3bGluZShpbnB1dDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXG4vZywgXCJcXG5cIiwpO1xyXG59XHJcblxyXG4vKipcclxuICogUmVwbGFjZXMgdGhlIGdpdmVuIGJvb2sgd2l0aCBpdHMgZGlzcGxheSB2YWx1ZSBkZWZpbmVkIGluIHRoZSBzZXR0aW5ncy4gSWYgbm8gbWFwcGluZyBleGlzdHMsIHRoZSBvcmlnaW5hbCB2YWx1ZSBpcyByZXR1cm5lZC5cclxuICogQHBhcmFtIGJvb2sgQm9vayB0aGF0IHNob3VsZCBiZSByZXBsYWNlZFxyXG4gKiBAcGFyYW0gc2V0dGluZ3MgUGx1Z2luJ3Mgc2V0dGluZ3NcclxuICovXHJcbmZ1bmN0aW9uIGdldERpc3BsYXlCb29rTmFtZShib29rOiBzdHJpbmcsIHNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncykge1xyXG5cdHJldHVybiBzZXR0aW5ncy5vdXRwdXRCb29rTWFwW2Jvb2sudG9Mb3dlckNhc2UoKV0gPz8gYm9vaztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRha2VzIG9yZ2luYWwgZmlsZW5hbWUgYW5kIGNvbnZlcnRzIGl0IHRvIGh1bWFuLXJlYWRhYmxlIHZlcnNpb24gaWYgQmlibGUgc3R1ZHkga2l0IGlzIHVzZWQgKHJlbW92ZXMgXCItXCIgYW5kIGxlYWRpbmcgemVyb3MpXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVCb29rQW5kQ2hhcHRlck91dHB1dChmaWxlQmFzZW5hbWU6IHN0cmluZywgc2V0dGluZ3M6IFBsdWdpblNldHRpbmdzKSB7XHJcblx0Y29uc3QgaXNPQlNLID0gaXNPQlNLRmlsZVJlZ0V4LnRlc3QoZmlsZUJhc2VuYW1lKTtcclxuXHRjb25zdCByZWdleCA9IGlzT0JTSyA/IGlzT0JTS0ZpbGVSZWdFeCA6IGJvb2tBbmRDaGFwdGVyUmVnRXg7XHJcblxyXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcclxuXHRsZXQgWywgYm9vaywgY2hhcHRlcl0gPSBmaWxlQmFzZW5hbWUubWF0Y2gocmVnZXgpO1xyXG5cdGlmIChpc09CU0sgJiYgY2hhcHRlci50b1N0cmluZygpWzBdID09PSBcIjBcIikgeyAvLyByZW1vdmUgbGVhZGluZyB6ZXJvcyBpbiBPQlNLIGNoYXB0ZXJzIChlZy4gR2VuLTAxKVxyXG5cdFx0Y2hhcHRlciA9IGNoYXB0ZXIuc3Vic3RyaW5nKDEpO1xyXG5cdH1cclxuXHRyZXR1cm4gZ2V0RGlzcGxheUJvb2tOYW1lKGJvb2ssIHNldHRpbmdzKSArIFwiIFwiICsgY2hhcHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgcGF0aCB0byBmb2xkZXIgaW4gd2hpY2ggZ2l2ZW4gZmlsZSBpcyBsb2NhdGVkIGZvciBtYWluIHRyYW5zbGF0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRGaWxlRm9sZGVySW5UcmFuc2xhdGlvbihhcHA6IEFwcCwgZmlsZW5hbWU6IHN0cmluZywgdHJhbnNsYXRpb246IHN0cmluZywgc2V0dGluZ3M6IFBsdWdpblNldHRpbmdzKSB7XHJcbiAgICBjb25zdCB0RmlsZUluZm8gPSBnZXRURmlsZUJ5RmlsZW5hbWUoYXBwLCBmaWxlbmFtZSwgdHJhbnNsYXRpb24sIHNldHRpbmdzKTtcclxuICAgIHJldHVybiB0RmlsZUluZm8udEZpbGUucGFyZW50LnBhdGg7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNvcHlPdXRwdXQoYXBwOiBBcHAsIHRGaWxlOiBURmlsZSwgZmlsZU5hbWU6IHN0cmluZywgYmVnaW5WZXJzZTogbnVtYmVyLCBlbmRWZXJzZTogbnVtYmVyLCBzZXR0aW5nczogUGx1Z2luU2V0dGluZ3MsIHRyYW5zbGF0aW9uUGF0aDogc3RyaW5nLCBsaW5rT25seTogYm9vbGVhbiwgdmVyYm9zZTogYm9vbGVhbikge1xyXG5cdGNvbnNvbGUubG9nKGAxMTggYjoke2JlZ2luVmVyc2V9IGU6JHtlbmRWZXJzZX1gKVxyXG4gICAgY29uc3QgYm9va0FuZENoYXB0ZXJPdXRwdXQgPSBjcmVhdGVCb29rQW5kQ2hhcHRlck91dHB1dCh0RmlsZS5iYXNlbmFtZSwgc2V0dGluZ3MpO1xyXG5cdGNvbnNvbGUubG9nKGAxMTkgYjoke2JlZ2luVmVyc2V9IGU6JHtlbmRWZXJzZX1gKVxyXG4gICAgY29uc3QgZmlsZSA9IGFwcC52YXVsdC5yZWFkKHRGaWxlKVxyXG5cdGNvbnNvbGUubG9nKGAxMjAgYjoke2JlZ2luVmVyc2V9IGU6JHtlbmRWZXJzZX1gKVxyXG4gICAgY29uc3QgbGluZXMgPSAoYXdhaXQgZmlsZSkuc3BsaXQoL1xccj9cXG4vKVxyXG5cdGNvbnNvbGUubG9nKGAxMjEgYjoke2JlZ2luVmVyc2V9IGU6JHtlbmRWZXJzZX1gKVxyXG4gICAgY29uc3QgdmVyc2VIZWFkaW5nTGV2ZWwgPSBzZXR0aW5ncy52ZXJzZUhlYWRpbmdMZXZlbFxyXG5cdGNvbnNvbGUubG9nKGAxMjIgYjoke2JlZ2luVmVyc2V9IGU6JHtlbmRWZXJzZX1gKVxyXG4gICAgY29uc3QgaGVhZGluZ3MgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodEZpbGUpLmhlYWRpbmdzLmZpbHRlcihoZWFkaW5nID0+ICF2ZXJzZUhlYWRpbmdMZXZlbCB8fCBoZWFkaW5nLmxldmVsID09PSB2ZXJzZUhlYWRpbmdMZXZlbClcclxuXHRjb25zb2xlLmxvZyhgMTIzIGI6JHtiZWdpblZlcnNlfSBlOiR7ZW5kVmVyc2V9YClcclxuICAgIGNvbnN0IGJlZ2luVmVyc2VOb09mZnNldCA9IGJlZ2luVmVyc2VcclxuXHRjb25zb2xlLmxvZyhgMTI0IGI6JHtiZWdpblZlcnNlfSBlOiR7ZW5kVmVyc2V9YClcclxuICAgIGJlZ2luVmVyc2UgKz0gc2V0dGluZ3MudmVyc2VPZmZzZXRcclxuXHRjb25zb2xlLmxvZyhgMTI1IGI6JHtiZWdpblZlcnNlfSBlOiR7ZW5kVmVyc2V9YClcclxuICAgIGVuZFZlcnNlICs9IHNldHRpbmdzLnZlcnNlT2Zmc2V0XHJcblx0Y29uc29sZS5sb2coYDEyNiBiOiR7YmVnaW5WZXJzZX0gZToke2VuZFZlcnNlfWApXHJcblx0Y29uc3QgbnJPZlZlcnNlcyA9IGhlYWRpbmdzLmxlbmd0aCAtIDE7XHJcblx0Y29uc29sZS5sb2coYDEyNyBiOiR7YmVnaW5WZXJzZX0gZToke2VuZFZlcnNlfWApXHJcblx0Y29uc3QgbWF4VmVyc2UgPSBlbmRWZXJzZSA8IG5yT2ZWZXJzZXMgPyBlbmRWZXJzZSA6IG5yT2ZWZXJzZXM7IC8vIGlmIGVuZHZlcnNlIGlzIGJpZ2dlciB0aGFuIGNoYXB0ZXIgYWxsb3dzLCBpdCBpcyBsb3dlcmVkIHRvIG1heGltdW1cclxuXHRjb25zb2xlLmxvZyhgMTI4IGI6JHtiZWdpblZlcnNlfSBlOiR7ZW5kVmVyc2V9YClcclxuICAgIGNvbnN0IG1heFZlcnNlTm9PZmZzZXQgPSBtYXhWZXJzZSAtIHNldHRpbmdzLnZlcnNlT2Zmc2V0O1xyXG5cdGNvbnNvbGUubG9nKGAxMjkgYjoke2JlZ2luVmVyc2V9IGU6JHtlbmRWZXJzZX1gKVxyXG5cclxuXHJcbiAgICBpZiAoYmVnaW5WZXJzZSA+IG1heFZlcnNlKSB7XHJcbiAgICAgICAgaWYgKHZlcmJvc2UpIHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShcIkJlZ2luIHZlcnNlIGlzIGJpZ2dlciB0aGFuIGVuZCB2ZXJzZSBvciBjaGFwdGVyIG1heGltdW1cIilcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgXCJCZWdpbiB2ZXJzZSBpcyBiaWdnZXIgdGhhbiBlbmQgdmVyc2Ugb3IgY2hhcHRlciBtYXhpbXVtXCJcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8vIDEgLSBMaW5rIHRvIHZlcnNlc1xyXG4gICAgbGV0IHBvc3RmaXggPSBcIlwiLCByZXMgPSBcIlwiLCBwYXRoVG9Vc2UgPSBcIlwiO1xyXG4gICAgaWYgKCFsaW5rT25seSkge1xyXG4gICAgICAgIHJlcyA9IHNldHRpbmdzLnByZWZpeDtcclxuICAgICAgICBwb3N0Zml4ID0gc2V0dGluZ3MucG9zdGZpeCA/IHJlcGxhY2VOZXdsaW5lKHNldHRpbmdzLnBvc3RmaXgpIDogXCIgXCI7XHJcbiAgICB9XHJcbiAgICBpZiAoc2V0dGluZ3MuZW5hYmxlTXVsdGlwbGVUcmFuc2xhdGlvbnMpIHtcclxuICAgICAgICBpZiAoc2V0dGluZ3MudHJhbnNsYXRpb25MaW5raW5nVHlwZSAhPT0gXCJtYWluXCIpIC8vIGxpbmsgdGhlIHRyYW5zbGF0aW9uIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHVzZWRcclxuICAgICAgICAgICAgcGF0aFRvVXNlID0gZ2V0RmlsZUZvbGRlckluVHJhbnNsYXRpb24oYXBwLCBmaWxlTmFtZSwgdHJhbnNsYXRpb25QYXRoLCBzZXR0aW5ncyk7XHJcbiAgICAgICAgZWxzZSB7IC8vIGxpbmsgbWFpbiB0cmFuc2xhdGlvblxyXG4gICAgICAgICAgICBwYXRoVG9Vc2UgPSBnZXRGaWxlRm9sZGVySW5UcmFuc2xhdGlvbihhcHAsIGZpbGVOYW1lLCBzZXR0aW5ncy5wYXJzZWRUcmFuc2xhdGlvblBhdGhzLmZpcnN0KCksIHNldHRpbmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cdGlmIChzZXR0aW5ncy5uZXdMaW5lcyAmJiAhbGlua09ubHkpIHtcclxuXHRcdHJlcyArPSBgJHtzZXR0aW5ncy5maXJzdExpbmVQcmVmaXh9YFxyXG5cdH1cclxuXHJcbiAgICBpZiAoYmVnaW5WZXJzZSA9PT0gbWF4VmVyc2UpIHtcclxuICAgICAgICByZXMgKz0gYFtbJHtwYXRoVG9Vc2UgPyBwYXRoVG9Vc2UgKyBcIi9cIiA6IFwiXCJ9JHtmaWxlTmFtZX0jJHtoZWFkaW5nc1tiZWdpblZlcnNlXS5oZWFkaW5nfXwke2Jvb2tBbmRDaGFwdGVyT3V0cHV0fSR7c2V0dGluZ3Mub25lVmVyc2VOb3RhdGlvbn0ke2JlZ2luVmVyc2VOb09mZnNldH1dXSR7cG9zdGZpeH1gIC8vIFtbR2VuIDEjMXxHZW4gMSwxLjFdXVxyXG4gICAgfSBlbHNlIGlmIChzZXR0aW5ncy5saW5rRW5kVmVyc2UpIHtcclxuICAgICAgICByZXMgKz0gYFtbJHtwYXRoVG9Vc2UgPyBwYXRoVG9Vc2UgKyBcIi9cIiA6IFwiXCJ9JHtmaWxlTmFtZX0jJHtoZWFkaW5nc1tiZWdpblZlcnNlXS5oZWFkaW5nfXwke2Jvb2tBbmRDaGFwdGVyT3V0cHV0fSR7c2V0dGluZ3MubXVsdGlwbGVWZXJzZXNOb3RhdGlvbn0ke2JlZ2luVmVyc2VOb09mZnNldH0tXV1gIC8vIFtbR2VuIDEjMXxHZW4gMSwxLV1dXHJcbiAgICAgICAgcmVzICs9IGBbWyR7cGF0aFRvVXNlID8gcGF0aFRvVXNlICsgXCIvXCIgOiBcIlwifSR7ZmlsZU5hbWV9IyR7aGVhZGluZ3NbbWF4VmVyc2VdLmhlYWRpbmd9fCR7bWF4VmVyc2VOb09mZnNldH1dXSR7cG9zdGZpeH1gOyAvLyBbW0dlbiAxIzN8M11dXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcyArPSBgW1ske3BhdGhUb1VzZSA/IHBhdGhUb1VzZSArIFwiL1wiIDogXCJcIn0ke2ZpbGVOYW1lfSMke2hlYWRpbmdzW2JlZ2luVmVyc2VdLmhlYWRpbmd9fCR7Ym9va0FuZENoYXB0ZXJPdXRwdXR9JHtzZXR0aW5ncy5tdWx0aXBsZVZlcnNlc05vdGF0aW9ufSR7YmVnaW5WZXJzZU5vT2Zmc2V0fS0ke21heFZlcnNlTm9PZmZzZXR9XV0ke3Bvc3RmaXh9YCAvLyBbW0dlbiAxIzF8R2VuIDEsMS0zXV1cclxuICAgIH1cclxuXHJcbiAgICAvLyAyIC0gVGV4dCBvZiB2ZXJzZXNcclxuICAgIGlmICghbGlua09ubHkpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gYmVnaW5WZXJzZTsgaSA8PSBtYXhWZXJzZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB2ZXJzZVByZWZpeCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IHZlcnNlUG9zdGZpeCA9IHNldHRpbmdzLmluc2VydFNwYWNlID8gXCIgXCIgOiBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuZWFjaFZlcnNlUHJlZml4KSB7XHJcbiAgICAgICAgICAgICAgICB2ZXJzZVByZWZpeCArPSBzZXR0aW5ncy5lYWNoVmVyc2VQcmVmaXgucmVwbGFjZSgve259L2csIChpIC0gc2V0dGluZ3MudmVyc2VPZmZzZXQpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgdmVyc2VQcmVmaXggPSB2ZXJzZVByZWZpeC5yZXBsYWNlKC97Zn0vZywgYCR7ZmlsZU5hbWV9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHZlcnNlVGV4dCA9IGdldFZlcnNlVGV4dChpLCBoZWFkaW5ncywgbGluZXMsIHNldHRpbmdzLm5ld0xpbmVzLCBzZXR0aW5ncy5wcmVmaXgpO1xyXG5cclxuXHRcdFx0aWYgKHNldHRpbmdzLmNvbW1lbnRTdGFydCAhPT0gXCJcIiAmJiBzZXR0aW5ncy5jb21tZW50RW5kICE9PSBcIlwiKSB7XHJcblx0XHRcdFx0Y29uc3QgZXNjYXBlZFN0YXJ0ID0gZXNjYXBlRm9yUmVnZXgoc2V0dGluZ3MuY29tbWVudFN0YXJ0KTtcclxuXHRcdFx0XHRjb25zdCBlc2NhcGVkRW5kID0gZXNjYXBlRm9yUmVnZXgoc2V0dGluZ3MuY29tbWVudEVuZCk7XHJcblx0XHRcdFx0Y29uc3QgcmVwbGFjZVJlZ2V4ID0gbmV3IFJlZ0V4cChgJHtlc2NhcGVkU3RhcnR9Lio/JHtlc2NhcGVkRW5kfWAsICdncycpO1xyXG5cdFx0XHRcdHZlcnNlVGV4dCA9IHZlcnNlVGV4dC5yZXBsYWNlKHJlcGxhY2VSZWdleCwgJycpO1xyXG5cdFx0XHR9XHJcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5uZXdMaW5lcykge1xyXG4gICAgICAgICAgICAgICAgcmVzICs9IFwiXFxuXCIgKyBzZXR0aW5ncy5wcmVmaXggKyB2ZXJzZVByZWZpeCArIHZlcnNlVGV4dDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlcyArPSB2ZXJzZVByZWZpeCArIHZlcnNlVGV4dCArIHZlcnNlUG9zdGZpeDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAzIC0gSW52aXNpYmxlIGxpbmtzXHJcbiAgICBpZiAoIXNldHRpbmdzLnVzZUludmlzaWJsZUxpbmtzKSByZXR1cm4gcmVzO1xyXG4gICAgaWYgKChiZWdpblZlcnNlID09IG1heFZlcnNlIHx8IChzZXR0aW5ncy5saW5rRW5kVmVyc2UgJiYgYmVnaW5WZXJzZSA9PSBtYXhWZXJzZSAtIDEpKSAvLyBObyBuZWVkIHRvIGFkZCBhbm90aGVyIGxpbmssIHdoZW4gb25seSBvbmUgdmVyc2UgaXMgYmVpbmcgbGlua2VkXHJcbiAgICAgICAgJiYgKCFzZXR0aW5ncy5lbmFibGVNdWx0aXBsZVRyYW5zbGF0aW9uc1xyXG4gICAgICAgICAgICB8fCBzZXR0aW5ncy50cmFuc2xhdGlvbkxpbmtpbmdUeXBlID09PSBcIm1haW5cIlxyXG4gICAgICAgICAgICB8fCBzZXR0aW5ncy50cmFuc2xhdGlvbkxpbmtpbmdUeXBlID09PSBcInVzZWRcIikpIC8vIE9ubHkgbGlua2luZyBvbmUgdHJhbnNsYXRpb24gLSBhbHJlYWR5IGxpbmtlZCBcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG5cclxuICAgIGlmIChzZXR0aW5ncy5uZXdMaW5lcyAmJiAhbGlua09ubHkpIHtcclxuICAgICAgICByZXMgKz0gYFxcbiR7c2V0dGluZ3MucHJlZml4fWA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbGFzdFZlcnNlVG9MaW5rID0gc2V0dGluZ3MubGlua0VuZFZlcnNlID8gbWF4VmVyc2UgLSAxIDogbWF4VmVyc2U7XHJcbiAgICBmb3IgKGxldCBpID0gYmVnaW5WZXJzZSArIDE7IGkgPD0gbGFzdFZlcnNlVG9MaW5rOyBpKyspIHsgLy8gYmVnaW5WZXJzZSArIDEgYmVjYXVzZSBsaW5rIHRvIGZpcnN0IHZlcnNlIGlzIGFscmVhZHkgaW5zZXJ0ZWQgYmVmb3JlIHRoZSB0ZXh0XHJcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5lbmFibGVNdWx0aXBsZVRyYW5zbGF0aW9ucykge1xyXG4gICAgICAgICAgICByZXMgKz0gYFtbJHtmaWxlTmFtZX0jJHtoZWFkaW5nc1tpXS5oZWFkaW5nfXxdXWBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7IC8vIG11bHRpcGxlIHRyYW5zbGF0aW9ucyBcclxuICAgICAgICAgICAgbGV0IHRyYW5zbGF0aW9uUGF0aHNUb1VzZTogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICAgICAgc3dpdGNoIChzZXR0aW5ncy50cmFuc2xhdGlvbkxpbmtpbmdUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWxsXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25QYXRoc1RvVXNlID0gc2V0dGluZ3MucGFyc2VkVHJhbnNsYXRpb25QYXRocy5tYXAoKHRyKSA9PiBnZXRGaWxlRm9sZGVySW5UcmFuc2xhdGlvbihhcHAsIGZpbGVOYW1lLCB0ciwgc2V0dGluZ3MpKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInVzZWRcIjpcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvblBhdGhzVG9Vc2UgPSBbZ2V0RmlsZUZvbGRlckluVHJhbnNsYXRpb24oYXBwLCBmaWxlTmFtZSwgdHJhbnNsYXRpb25QYXRoLCBzZXR0aW5ncyldXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidXNlZEFuZE1haW5cIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb25QYXRoICE9PSBzZXR0aW5ncy5wYXJzZWRUcmFuc2xhdGlvblBhdGhzLmZpcnN0KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25QYXRoc1RvVXNlID0gW2dldEZpbGVGb2xkZXJJblRyYW5zbGF0aW9uKGFwcCwgZmlsZU5hbWUsIHRyYW5zbGF0aW9uUGF0aCwgc2V0dGluZ3MpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRGaWxlRm9sZGVySW5UcmFuc2xhdGlvbihhcHAsIGZpbGVOYW1lLCBzZXR0aW5ncy5wYXJzZWRUcmFuc2xhdGlvblBhdGhzLmZpcnN0KCksIHNldHRpbmdzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvblBhdGhzVG9Vc2UgPSBbZ2V0RmlsZUZvbGRlckluVHJhbnNsYXRpb24oYXBwLCBmaWxlTmFtZSwgdHJhbnNsYXRpb25QYXRoLCBzZXR0aW5ncyldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtYWluXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25QYXRoc1RvVXNlID0gW2dldEZpbGVGb2xkZXJJblRyYW5zbGF0aW9uKGFwcCwgZmlsZU5hbWUsIHNldHRpbmdzLnBhcnNlZFRyYW5zbGF0aW9uUGF0aHMuZmlyc3QoKSwgc2V0dGluZ3MpXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJhbnNsYXRpb25QYXRoc1RvVXNlLmZvckVhY2goKHRyYW5zbGF0aW9uUGF0aCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzICs9IGBbWyR7dHJhbnNsYXRpb25QYXRofS8ke2ZpbGVOYW1lfSMke2hlYWRpbmdzW2ldLmhlYWRpbmd9fF1dYFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbiIsICIvKlxyXG4qIFJlZ2V4ZXMgZm9yIHZlcnNlIHBhcnNpbmdcclxuKi9cclxuXHJcbi8vIExpbmsgdG8gb25lIHZlcnNlLCBmb3IgZXhhbXBsZSBcIkdlbiAxLjFcIiBvciBcIkdlbiAxOjFcIlxyXG5leHBvcnQgY29uc3Qgb25lVmVyc2VSZWdFeCA9IG5ldyBSZWdFeHAoLyhbXiw6I10rKVssIy46O11cXHMqKFxcZCspXFxzKiQvKTtcclxuXHJcbi8vIExpbmsgdG8gbXVsdGlwbGUgdmVyc2VzLCBmb3IgZXhhbXBsZSBcIkdlbiAxLDEtNVwiXHJcbmV4cG9ydCBjb25zdCBtdWx0aXBsZVZlcnNlc1JlZ0V4ID0gbmV3IFJlZ0V4cCgvKFteLDojXSspWywjLjo7XVxccyooXFxkKylcXHMqWy0uPV1cXHMqKFxcZCspXFxzKiQvKTtcclxuXHJcbi8vIEJvb2sgYW5kIGNoYXB0ZXIgc3RyaW5nXHJcbmV4cG9ydCBjb25zdCBib29rQW5kQ2hhcHRlclJlZ0V4ID0gLyhbXiw6I10qXFxTKVstfFxcc10rKFxcZCspL1xyXG5cclxuLy8gTXVsdGlwbGUgY2hhcHRlcnMsIGZvciBleGFtcGxlIFwiR2VuIDEtM1wiXHJcbmV4cG9ydCBjb25zdCBtdWx0aXBsZUNoYXB0ZXJzUmVnRXggPSAvKFxcZCpbXlxcZCw6I10rKVxccyooXFxkKylcXHMqLVxccyooXFxkKylcXHMqJC9cclxuXHJcbi8vIENhbiBiZSB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIGdpdmVuIG5hbWUgb2YgZmlsZSBpcyBmcm9tIE9CU0sgKGZvciBleGFtcGxlIEdlbi0wMSlcclxuZXhwb3J0IGNvbnN0IGlzT0JTS0ZpbGVSZWdFeCA9IC8oW0Etelx1MDBDMC1cdTAxN0UwLTkgXSspLShcXGR7MiwzfSkvXHJcblxyXG4vLyBFc2NhcGVzIGdpdmVuIHN0cmluZyBzbyB0aGF0IGl0IGNhbiBiZSBzYWZlbHkgdXNlZCBpbiByZWd1bGFyIGV4cHJlc3Npb25cclxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUZvclJlZ2V4KHN0cmluZzogc3RyaW5nKSB7XHJcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpOyAvLyAkJiBtZWFucyB0aGUgd2hvbGUgbWF0Y2hlZCBzdHJpbmdcclxufVxyXG4iLCAiLypcclxuICogQ2FwaXRhbGl6ZXMgZ2l2ZW4gc3RyaW5nIChza2lwcyBsZWFkaW5nIHdoaXRlc3BhY2VzIGFuZCBudW1iZXJzKVxyXG4gKi9cclxuaW1wb3J0IHtcclxuXHRib29rQW5kQ2hhcHRlclJlZ0V4LFxyXG5cdG11bHRpcGxlQ2hhcHRlcnNSZWdFeCxcclxuXHRtdWx0aXBsZVZlcnNlc1JlZ0V4LFxyXG5cdG9uZVZlcnNlUmVnRXgsXHJcbn0gZnJvbSBcIi4uL3V0aWxzL3JlZ2V4ZXNcIjtcclxuaW1wb3J0IHsgQXBwLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHtQbHVnaW5TZXR0aW5nc30gZnJvbSBcIi4uL21haW5cIjtcclxuXHJcbi8qKlxyXG4gKiBDYXBpdGFsaXplcyBnaXZlbiBzdHJpbmcsIHRha2luZyBsZWFkaW5nIG51bWJlcnMgaW50byBhY2NvdW50XHJcbiAqIEBwYXJhbSBzdHIgU3RyaW5nIHRoYXQgc2hvdWxkIGJlIGNhcGl0YWxpemVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHI6IHN0cmluZykge1xyXG5cdHN0ciA9IHN0ci50b0xvY2FsZUxvd2VyQ2FzZSgpO1xyXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZiAoL1teXFxzXFxkLiwjLV0vLnRlc3Qoc3RyLmNoYXJBdChpKSkpIHtcclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRzdHIuc2xpY2UoMCwgaSkgKyBzdHIuY2hhckF0KGkpLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoaSArIDEpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBzdHI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgaW5wdXQgZnJvbSB1c2VyLCBleHBlY3RpbmcgY2hhcHRlciBhbmQgdmVyc2VzXHJcbiAqIEBwYXJhbSB1c2VySW5wdXRcclxuICogQHBhcmFtIHZlcmJvc2UgV2hldGhlciBvciBub3QgdXNlciBzaG91bGQgYmUgbm90aWZpZWQgaWYgdGhlIGxpbmsgaXMgaW5jb3JyZWN0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVc2VyVmVyc2VJbnB1dCh1c2VySW5wdXQ6IHN0cmluZywgdmVyYm9zZSA9IHRydWUpIHtcclxuXHRsZXQgYm9va0FuZENoYXB0ZXI7XHJcblx0bGV0IGJlZ2luVmVyc2U7XHJcblx0bGV0IGVuZFZlcnNlO1xyXG5cclxuXHRzd2l0Y2ggKHRydWUpIHtcclxuXHRcdGNhc2Ugb25lVmVyc2VSZWdFeC50ZXN0KHVzZXJJbnB1dCk6IHtcclxuXHRcdFx0Ly8gb25lIHZlcnNlXHJcblx0XHRcdGNvbnN0IFssIG1hdGNoZWRDaGFwdGVyLCBtYXRjaGVkVmVyc2VdID1cclxuXHRcdFx0XHR1c2VySW5wdXQubWF0Y2gob25lVmVyc2VSZWdFeCk7XHJcblx0XHRcdGJvb2tBbmRDaGFwdGVyID0gbWF0Y2hlZENoYXB0ZXI7XHJcblx0XHRcdGJlZ2luVmVyc2UgPSBOdW1iZXIobWF0Y2hlZFZlcnNlKTtcclxuXHRcdFx0ZW5kVmVyc2UgPSBOdW1iZXIobWF0Y2hlZFZlcnNlKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0XHRjYXNlIG11bHRpcGxlVmVyc2VzUmVnRXgudGVzdCh1c2VySW5wdXQpOiB7XHJcblx0XHRcdC8vIG11bHRpcGxlIHZlcnNlcywgb25lIGNoYXB0ZXJcclxuXHRcdFx0Y29uc3QgWywgbWF0Y2hlZENoYXB0ZXIsIG1hdGNoZWRCZWdpblZlcnNlLCBtYXRjaGVkRW5kVmVyc2VdID1cclxuXHRcdFx0XHR1c2VySW5wdXQubWF0Y2gobXVsdGlwbGVWZXJzZXNSZWdFeCk7XHJcblx0XHRcdGJvb2tBbmRDaGFwdGVyID0gbWF0Y2hlZENoYXB0ZXI7XHJcblx0XHRcdGJlZ2luVmVyc2UgPSBOdW1iZXIobWF0Y2hlZEJlZ2luVmVyc2UpO1xyXG5cdFx0XHRlbmRWZXJzZSA9IE51bWJlcihtYXRjaGVkRW5kVmVyc2UpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHRcdGRlZmF1bHQ6IHtcclxuXHRcdFx0aWYgKHZlcmJvc2UpIHtcclxuXHRcdFx0XHRuZXcgTm90aWNlKGBXcm9uZyBmb3JtYXQgXCIke3VzZXJJbnB1dH1cImApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRocm93IFwiQ291bGQgbm90IHBhcnNlIHVzZXIgaW5wdXRcIjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB7IGJvb2tBbmRDaGFwdGVyLCBiZWdpblZlcnNlLCBlbmRWZXJzZSB9O1xyXG59XHJcblxyXG4vKipcclxuICogUGFyc2VzIGlucHV0IGZyb20gdXNlciwgZXhwZWN0aW5nIG11bHRpcGxlIGNoYXB0ZXJzXHJcbiAqIEBwYXJhbSB1c2VySW5wdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVzZXJCb29rSW5wdXQodXNlcklucHV0OiBzdHJpbmcpIHtcclxuXHRsZXQgYm9vaztcclxuXHRsZXQgZmlyc3RDaGFwdGVyO1xyXG5cdGxldCBsYXN0Q2hhcHRlcjtcclxuXHJcblx0c3dpdGNoICh0cnVlKSB7XHJcblx0XHRjYXNlIG11bHRpcGxlQ2hhcHRlcnNSZWdFeC50ZXN0KHVzZXJJbnB1dCk6IHtcclxuXHRcdFx0Ly8gb25lIHZlcnNlXHJcblx0XHRcdGNvbnN0IFssIG1hdGNoZWRCb29rLCBtYXRjaGVkRmlyc3RDaGFwdGVyLCBtYXRjaGVkTGFzdENoYXB0ZXJdID1cclxuXHRcdFx0XHR1c2VySW5wdXQubWF0Y2gobXVsdGlwbGVDaGFwdGVyc1JlZ0V4KTtcclxuXHRcdFx0Ym9vayA9IG1hdGNoZWRCb29rLnRyaW0oKTtcclxuXHRcdFx0Zmlyc3RDaGFwdGVyID0gTnVtYmVyKG1hdGNoZWRGaXJzdENoYXB0ZXIpO1xyXG5cdFx0XHRsYXN0Q2hhcHRlciA9IE51bWJlcihtYXRjaGVkTGFzdENoYXB0ZXIpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHRcdGRlZmF1bHQ6IHtcclxuXHRcdFx0bmV3IE5vdGljZShgV3JvbmcgZm9ybWF0IFwiJHt1c2VySW5wdXR9XCJgKTtcclxuXHRcdFx0dGhyb3cgXCJDb3VsZCBub3QgcGFyc2UgdXNlciBpbnB1dFwiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHsgYm9vaywgZmlyc3RDaGFwdGVyLCBsYXN0Q2hhcHRlciB9O1xyXG59XHJcblxyXG4vKipcclxuICogVHJpZXMgdG8gZ2V0IHRGaWxlIGNvcnJlc3BvbmRpbmcgdG8gZ2l2ZW4gZmlsZW5hbWUuIElmIHRoZSBmaWxlIGlzIG5vdCBmb3VuZCwgZmlsZW5hbWUgaXMgY29udmVydGVkIHRvIG1hdGNoIE9ic2lkaWFuXHJcbiAqIEJpYmxlIFN0dWR5IEtpdCBuYW1pbmcgY29udmVudGlvbiBhbmQgdGhlIG9wZXJhdGlvbiBpcyByZXBlYXRlZC5cclxuICogQHBhcmFtIGFwcFxyXG4gKiBAcGFyYW0gZmlsZW5hbWUgTmFtZSBvZiBmaWxlIHRoYXQgc2hvdWxkIGJlIHNlYXJjaGVkXHJcbiAqIEBwYXJhbSBwYXRoIFBhdGggd2hlcmUgdGhlIHNlYXJjaCBzaG91bGQgb2NjdXJlXHJcbiAqIEBwYXJhbSBzZXR0aW5ncyBQbHVnaW4gc2V0dGluZ3NcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWxlQnlGaWxlbmFtZShhcHA6IEFwcCwgZmlsZW5hbWU6IHN0cmluZywgcGF0aDogc3RyaW5nLCBzZXR0aW5nczogUGx1Z2luU2V0dGluZ3MpIHtcclxuXHRwYXRoID0gcGF0aCA/PyBcIi9cIjtcclxuXHRsZXQgZmlsZW5hbWVDb3B5ID0gZmlsZW5hbWU7XHJcblxyXG5cdC8vIFRyeSB1bmFsdGVyZWRcclxuXHRsZXQgdEZpbGUgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChmaWxlbmFtZUNvcHksIHBhdGgpO1xyXG5cdGlmICh0RmlsZSkge1xyXG5cdFx0cmV0dXJuIHsgZmlsZU5hbWU6IGZpbGVuYW1lQ29weSwgdEZpbGUgfTtcclxuXHR9XHJcblxyXG5cdC8vIFRyeSB1c2luZyBpbnB1dCBib29rIG1hcHBpbmdcclxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0XHJcblx0bGV0IFssIGJvb2ssIGNoYXB0ZXJdID0gZmlsZW5hbWVDb3B5Lm1hdGNoKGJvb2tBbmRDaGFwdGVyUmVnRXgpO1xyXG5cdGNvbnN0IGNvbnZlcnRlZEJvb2sgPSBzZXR0aW5ncy5pbnB1dEJvb2tNYXBbYm9vay50b0xvd2VyQ2FzZSgpXSA/PyBib29rO1xyXG5cdGZpbGVuYW1lQ29weSA9IGAke2NvbnZlcnRlZEJvb2t9ICR7Y2hhcHRlcn1gO1xyXG5cdHRGaWxlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoZmlsZW5hbWVDb3B5LCBwYXRoKTtcclxuXHRpZiAodEZpbGUpIHtcclxuXHRcdHJldHVybiB7IGZpbGVOYW1lOiBmaWxlbmFtZUNvcHksIHRGaWxlIH07XHJcblx0fVxyXG5cclxuXHQvLyBUcnkgdXNpbmcgXCItXCIgYXMgc2VwYXJhdG9yXHJcblx0ZmlsZW5hbWVDb3B5ID0gYCR7Y29udmVydGVkQm9va30tJHtjaGFwdGVyfWA7XHJcblx0dEZpbGUgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChmaWxlbmFtZUNvcHksIHBhdGgpO1xyXG5cdGlmICh0RmlsZSkge1xyXG5cdFx0cmV0dXJuIHsgZmlsZU5hbWU6IGZpbGVuYW1lQ29weSwgdEZpbGUgfTtcclxuXHR9XHJcblxyXG5cdC8vIFRyeSB1c2luZyBcIi1cIiBhcyBzZXBhcmF0b3JcclxuXHRpZiAoY2hhcHRlci5sZW5ndGggPT0gMSkge1xyXG5cdFx0Y2hhcHRlciA9IGAwJHtjaGFwdGVyfWA7XHJcblx0fVxyXG5cdGZpbGVuYW1lQ29weSA9IGAke2NvbnZlcnRlZEJvb2t9LSR7Y2hhcHRlcn1gO1xyXG5cdHRGaWxlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoZmlsZW5hbWVDb3B5LCBwYXRoKTtcclxuXHRpZiAodEZpbGUpIHtcclxuXHRcdHJldHVybiB7IGZpbGVOYW1lOiBmaWxlbmFtZUNvcHksIHRGaWxlIH07XHJcblx0fVxyXG5cdHJldHVybiB7IGZpbGVOYW1lOiBmaWxlbmFtZSwgdEZpbGUgfTtcclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBQbHVnaW5TZXR0aW5ncyB9IGZyb20gXCIuLi9tYWluXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUxpbmtzIH0gZnJvbSBcIi4uL2xvZ2ljL2xpbmstY29tbWFuZFwiO1xyXG5cclxuZXhwb3J0IGVudW0gTGlua1R5cGUge1xyXG5cdEJhc2ljID0gXCJCYXNpY1wiLFxyXG5cdEVtYmVkZGVkID0gXCJFbWJlZGRlZFwiLFxyXG5cdEludmlzaWJsZSA9IFwiSW52aXNpYmxlXCIsXHJcblx0Rmlyc3RBbmRMYXN0ID0gXCJGaXJzdEFuZExhc3RcIixcclxufVxyXG5cclxuLyoqXHJcbiAqIE1vZGFsIHRoYXQgbGV0cyB5b3UgaW5zZXJ0IGJpYmxlIHJlZmVyZW5jZSBieSB1c2luZyBPYnNpZGlhbiBsaW5rc1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlua1ZlcnNlTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcblx0dXNlcklucHV0OiBzdHJpbmc7XHJcblx0bGlua1R5cGU6IExpbmtUeXBlO1xyXG5cdHVzZU5ld0xpbmU6IGJvb2xlYW47XHJcblx0b25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZDtcclxuXHRwbHVnaW5TZXR0aW5nczogUGx1Z2luU2V0dGluZ3M7XHJcblxyXG5cdGhhbmRsZUlucHV0ID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Y29uc3QgcmVzID0gYXdhaXQgY3JlYXRlTGlua3MoXHJcblx0XHRcdFx0dGhpcy5hcHAsXHJcblx0XHRcdFx0dGhpcy51c2VySW5wdXQsXHJcblx0XHRcdFx0dGhpcy5saW5rVHlwZSxcclxuXHRcdFx0XHR0aGlzLnVzZU5ld0xpbmUsXHJcblx0XHRcdFx0dGhpcy5wbHVnaW5TZXR0aW5nc1xyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLmNsb3NlKCk7XHJcblx0XHRcdHRoaXMub25TdWJtaXQocmVzKTtcclxuXHRcdH0gY2F0Y2ggKGVycikge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHRhcHA6IEFwcCxcclxuXHRcdHNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncyxcclxuXHRcdG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWRcclxuXHQpIHtcclxuXHRcdHN1cGVyKGFwcCk7XHJcblx0XHR0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XHJcblx0XHR0aGlzLnBsdWdpblNldHRpbmdzID0gc2V0dGluZ3M7XHJcblx0XHR0aGlzLmxpbmtUeXBlID0gdGhpcy5wbHVnaW5TZXR0aW5ncy5saW5rVHlwZVByZXNldDtcclxuXHRcdHRoaXMudXNlTmV3TGluZSA9IHRoaXMucGx1Z2luU2V0dGluZ3MubmV3TGluZVByZXNldDtcclxuXHR9XHJcblxyXG5cdG9uT3BlbigpIHtcclxuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cclxuXHRcdC8vIEFkZCBoZWFkaW5nXHJcblx0XHRjb250ZW50RWwuY3JlYXRlRWwoXCJoM1wiLCB7XHJcblx0XHRcdHRleHQ6IFwiQ3JlYXRlIE9ic2lkaWFuIGxpbmtzIGZyb20gQmlibGUgcmVmZXJlbmNlXCIsXHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBBZGQgVGV4dGJveCBmb3IgcmVmZXJlbmNlXHJcblx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpLnNldE5hbWUoXCJJbnNlcnQgcmVmZXJlbmNlXCIpLmFkZFRleHQoKHRleHQpID0+XHJcblx0XHRcdHRleHRcclxuXHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnVzZXJJbnB1dCA9IHZhbHVlO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0LmlucHV0RWwuZm9jdXMoKVxyXG5cdFx0KTsgLy8gU2V0cyBmb2N1cyB0byBpbnB1dCBmaWVsZFxyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRlbnRFbCkuc2V0TmFtZShcIkxpbmsgdHlwZVwiKS5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcclxuXHRcdFx0ZHJvcGRvd24uYWRkT3B0aW9uKExpbmtUeXBlLkJhc2ljLCBMaW5rVHlwZS5CYXNpYyk7XHJcblx0XHRcdGRyb3Bkb3duLmFkZE9wdGlvbihMaW5rVHlwZS5FbWJlZGRlZCwgTGlua1R5cGUuRW1iZWRkZWQpO1xyXG5cdFx0XHRkcm9wZG93bi5hZGRPcHRpb24oTGlua1R5cGUuRmlyc3RBbmRMYXN0LCBcIlNob3cgRmlyc3QgJiBMYXN0XCIpO1xyXG5cdFx0XHRkcm9wZG93bi5hZGRPcHRpb24oTGlua1R5cGUuSW52aXNpYmxlLCBMaW5rVHlwZS5JbnZpc2libGUpO1xyXG5cdFx0XHRkcm9wZG93bi5vbkNoYW5nZSgodmFsdWUpID0+ICh0aGlzLmxpbmtUeXBlID0gdmFsdWUgYXMgTGlua1R5cGUpKTtcclxuXHRcdFx0ZHJvcGRvd24uc2V0VmFsdWUodGhpcy5wbHVnaW5TZXR0aW5ncy5saW5rVHlwZVByZXNldCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcblx0XHRcdC5zZXROYW1lKFwiRWFjaCBsaW5rIG9uIG5ldyBsaW5lP1wiKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKCh0Z2wpID0+IHtcclxuXHRcdFx0XHR0Z2wuc2V0VmFsdWUodGhpcy5wbHVnaW5TZXR0aW5ncy5uZXdMaW5lUHJlc2V0KTtcclxuXHRcdFx0XHR0Z2wub25DaGFuZ2UoKHZhbCkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy51c2VOZXdMaW5lID0gdmFsO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHQvLyBBZGQgYnV0dG9uIGZvciBzdWJtaXQvZXhpdFxyXG5cdFx0bmV3IFNldHRpbmcoY29udGVudEVsKS5hZGRCdXR0b24oKGJ0bikgPT4ge1xyXG5cdFx0XHRidG4uc2V0QnV0dG9uVGV4dChcIkxpbmtcIikuc2V0Q3RhKCkub25DbGljayh0aGlzLmhhbmRsZUlucHV0KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIEFsbG93IHVzZXIgdG8gZXhpdCB1c2luZyBFbnRlciBrZXlcclxuXHRcdGNvbnRlbnRFbC5vbmtleWRvd24gPSAoZXZlbnQpID0+IHtcclxuXHRcdFx0aWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XHJcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHR0aGlzLmhhbmRsZUlucHV0KCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRvbkNsb3NlKCkge1xyXG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7QXBwLCBOb3RpY2V9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQge0xpbmtUeXBlfSBmcm9tIFwiLi4vbW9kYWxzL2xpbmstdmVyc2UtbW9kYWxcIjtcclxuaW1wb3J0IHtQbHVnaW5TZXR0aW5nc30gZnJvbSBcIi4uL21haW5cIjtcclxuaW1wb3J0IHttdWx0aXBsZUNoYXB0ZXJzUmVnRXh9IGZyb20gXCIuLi91dGlscy9yZWdleGVzXCI7XHJcbmltcG9ydCB7Y2FwaXRhbGl6ZSwgZ2V0RmlsZUJ5RmlsZW5hbWUsIHBhcnNlVXNlckJvb2tJbnB1dCwgcGFyc2VVc2VyVmVyc2VJbnB1dCx9IGZyb20gXCIuL2NvbW1vblwiO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGJpYmxpY2FsIHJlZmVyZW5jZSB0byBsaW5rcyB0byBnaXZlbiB2ZXJzZXMgb3IgYm9va3NcclxuICogQHBhcmFtIGFwcCBBcHAgaW5zdGFuY2VcclxuICogQHBhcmFtIHVzZXJJbnB1dCBVc2VyIElucHV0IChsaW5rIHRvIHZlcnNlIG9yIGNoYXB0ZXIpXHJcbiAqIEBwYXJhbSBsaW5rVHlwZSBUeXBlIG9mIGxpbmsgdGhhdCBzaG91bGQgYmUgdXNlZFxyXG4gKiBAcGFyYW0gdXNlTmV3TGluZSBXaGV0aGVyIG9yIG5vdCBzaG91bGQgZWFjaCBsaW5rIGJlIG9uIG5ldyBsaW5lXHJcbiAqIEBwYXJhbSBzZXR0aW5ncyBQbHVnaW4ncyBzZXR0aW5nc1xyXG4gKiBAcmV0dXJucyBTdHJpbmcgd2l0aCBxdW90ZSBvZiBsaW5rZWQgdmVyc2VzLiBJZiBjb252ZXJ0aW5nIHdhcyBub3Qgc3VjY2Vzc2Z1bCwgcmV0dXJucyBlbXB0eSBzdHJpbmcuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlTGlua3MoXHJcblx0YXBwOiBBcHAsXHJcblx0dXNlcklucHV0OiBzdHJpbmcsXHJcblx0bGlua1R5cGU6IExpbmtUeXBlLFxyXG5cdHVzZU5ld0xpbmU6IGJvb2xlYW4sXHJcblx0c2V0dGluZ3M6IFBsdWdpblNldHRpbmdzXHJcbikge1xyXG5cdGlmIChtdWx0aXBsZUNoYXB0ZXJzUmVnRXgudGVzdCh1c2VySW5wdXQpKSB7XHJcblx0XHRyZXR1cm4gZ2V0TGlua3NGb3JDaGFwdGVycyhcclxuXHRcdFx0YXBwLFxyXG5cdFx0XHR1c2VySW5wdXQsXHJcblx0XHRcdGxpbmtUeXBlLFxyXG5cdFx0XHR1c2VOZXdMaW5lLFxyXG5cdFx0XHRzZXR0aW5nc1xyXG5cdFx0KTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIGdldExpbmtzRm9yVmVyc2VzKFxyXG5cdFx0XHRhcHAsXHJcblx0XHRcdHVzZXJJbnB1dCxcclxuXHRcdFx0bGlua1R5cGUsXHJcblx0XHRcdHVzZU5ld0xpbmUsXHJcblx0XHRcdHNldHRpbmdzXHJcblx0XHQpO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgY29weSBjb21tYW5kIG91dHB1dCB3aGVuIGxpbmtpbmcgbXVsdGlwbGUgdmVyc2VzXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRMaW5rc0ZvclZlcnNlcyhcclxuXHRhcHA6IEFwcCxcclxuXHR1c2VySW5wdXQ6IHN0cmluZyxcclxuXHRsaW5rVHlwZTogTGlua1R5cGUsXHJcblx0dXNlTmV3TGluZTogYm9vbGVhbixcclxuXHRzZXR0aW5nczogUGx1Z2luU2V0dGluZ3NcclxuKSB7XHJcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxyXG5cdGxldCB7IGJvb2tBbmRDaGFwdGVyLCBiZWdpblZlcnNlLCBlbmRWZXJzZSB9ID1cclxuXHRcdHBhcnNlVXNlclZlcnNlSW5wdXQodXNlcklucHV0KTtcclxuXHRpZiAoc2V0dGluZ3Muc2hvdWxkQ2FwaXRhbGl6ZUJvb2tOYW1lcykge1xyXG5cdFx0Ym9va0FuZENoYXB0ZXIgPSBjYXBpdGFsaXplKGJvb2tBbmRDaGFwdGVyKTsgLy8gRm9yIG91dHB1dCBjb25zaXN0ZW5jeVxyXG5cdH1cclxuXHRpZiAoc2V0dGluZ3MudmVyaWZ5RmlsZXNXaGVuTGlua2luZykge1xyXG5cdFx0Y29uc3QgeyBmaWxlTmFtZSwgdEZpbGUgfSA9IGdldEZpbGVCeUZpbGVuYW1lKGFwcCwgYm9va0FuZENoYXB0ZXIsIFwiL1wiLCBzZXR0aW5ncyk7XHJcblx0XHRpZiAoIXRGaWxlKSB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXHJcblx0XHRcdFx0YEZpbGUgXCIke2ZpbGVOYW1lfVwiIGRvZXMgbm90IGV4aXN0IGFuZCB2ZXJpZnkgZmlsZXMgaXMgc2V0IHRvIHRydWVgXHJcblx0XHRcdCk7XHJcblx0XHRcdHRocm93IGBGaWxlICR7ZmlsZU5hbWV9IGRvZXMgbm90IGV4aXN0LCB2ZXJpZnkgZmlsZXMgPSB0cnVlYDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmIChiZWdpblZlcnNlID4gZW5kVmVyc2UpIHtcclxuXHRcdG5ldyBOb3RpY2UoXCJCZWdpbiB2ZXJzZSBpcyBiaWdnZXIgdGhhbiBlbmQgdmVyc2VcIik7XHJcblx0XHR0aHJvdyBcIkJlZ2luIHZlcnNlIGlzIGJpZ2dlciB0aGFuIGVuZCB2ZXJzZVwiO1xyXG5cdH1cclxuXHJcblx0bGV0IHJlcyA9IFwiXCI7XHJcblx0Zm9yIChsZXQgaSA9IGJlZ2luVmVyc2U7IGkgPD0gZW5kVmVyc2U7IGkrKykge1xyXG5cdFx0Y29uc3QgYmVnaW5uaW5nID0gZ2V0TGlua0JlZ2lubmluZyhpLCBiZWdpblZlcnNlLCBlbmRWZXJzZSwgbGlua1R5cGUpO1xyXG5cdFx0Y29uc3QgZW5kaW5nID0gZ2V0TGlua0VuZGluZyhpLCBiZWdpblZlcnNlLCBlbmRWZXJzZSwgbGlua1R5cGUsIGJvb2tBbmRDaGFwdGVyLCBzZXR0aW5ncyk7XHJcblxyXG5cdFx0cmVzICs9IGAke2JlZ2lubmluZ31bWyR7Ym9va0FuZENoYXB0ZXJ9JHtzZXR0aW5ncy5saW5rU2VwYXJhdG9yfSR7c2V0dGluZ3MudmVyc2VQcmVmaXh9JHtpfSR7ZW5kaW5nfV1dYDtcclxuXHRcdGlmICh1c2VOZXdMaW5lKSB7XHJcblx0XHRcdHJlcyArPSBcIlxcblwiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRMaW5rQmVnaW5uaW5nKGN1cnJlbnRWZXJzZTogbnVtYmVyLCBiZWdpblZlcnNlOiBudW1iZXIsIGVuZFZlcnNlOiBudW1iZXIsIGxpbmtUeXBlOiBMaW5rVHlwZSk6IHN0cmluZyB7XHJcblx0c3dpdGNoIChsaW5rVHlwZSkge1xyXG5cdFx0Y2FzZSBMaW5rVHlwZS5FbWJlZGRlZDpcclxuXHRcdFx0cmV0dXJuIFwiIVwiXHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRyZXR1cm4gXCJcIlxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TGlua0VuZGluZyhjdXJyZW50VmVyc2U6IG51bWJlciwgYmVnaW5WZXJzZTogbnVtYmVyLCBlbmRWZXJzZTogbnVtYmVyLCBsaW5rVHlwZTogTGlua1R5cGUsIGJvb2tBbmRDaGFwdGVyOiBzdHJpbmcsIHNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncyk6IHN0cmluZyB7XHJcblx0c3dpdGNoIChsaW5rVHlwZSl7XHJcblx0XHRjYXNlIExpbmtUeXBlLkludmlzaWJsZTpcclxuXHRcdFx0cmV0dXJuIFwifFwiXHJcblx0XHRjYXNlIExpbmtUeXBlLkZpcnN0QW5kTGFzdDoge1xyXG5cdFx0XHRpZiAoYmVnaW5WZXJzZSA9PT0gZW5kVmVyc2UpIHtcclxuXHRcdFx0XHRyZXR1cm4gYHwke2Jvb2tBbmRDaGFwdGVyfSR7c2V0dGluZ3Mub25lVmVyc2VOb3RhdGlvbn0ke2N1cnJlbnRWZXJzZX1gXHJcblx0XHRcdH0gZWxzZSBpZiAoY3VycmVudFZlcnNlID09PSBiZWdpblZlcnNlKSB7XHJcblx0XHRcdFx0cmV0dXJuIGB8JHtib29rQW5kQ2hhcHRlcn0ke3NldHRpbmdzLm11bHRpcGxlVmVyc2VzTm90YXRpb259JHtjdXJyZW50VmVyc2V9YFxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChjdXJyZW50VmVyc2UgPT09IGVuZFZlcnNlKSB7XHJcblx0XHRcdFx0cmV0dXJuIGB8LSR7Y3VycmVudFZlcnNlfWBcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gXCJ8XCI7IC8vIGxpbmtzIGJldHdlZW4gZmlyc3QgYW5kIGxhc3QgdmVyc2UgYXJlIGludmlzaWJsZVxyXG5cdFx0fVxyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0cmV0dXJuIFwiXCJcclxuXHR9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBjb3B5IGNvbW1hbmQgb3V0cHV0IHdoZW4gbGlua2luZyBtdWx0aXBsZSBjaGFwdGVyc1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0TGlua3NGb3JDaGFwdGVycyhcclxuXHRhcHA6IEFwcCxcclxuXHR1c2VySW5wdXQ6IHN0cmluZyxcclxuXHRsaW5rVHlwZTogTGlua1R5cGUsXHJcblx0dXNlTmV3TGluZTogYm9vbGVhbixcclxuXHRzZXR0aW5nczogUGx1Z2luU2V0dGluZ3NcclxuKSB7XHJcblx0Y29uc3QgeyBib29rLCBmaXJzdENoYXB0ZXIsIGxhc3RDaGFwdGVyIH0gPSBwYXJzZVVzZXJCb29rSW5wdXQodXNlcklucHV0KTtcclxuXHRpZiAoZmlyc3RDaGFwdGVyID4gbGFzdENoYXB0ZXIpIHtcclxuXHRcdG5ldyBOb3RpY2UoXCJCZWdpbiBjaGFwdGVyIGlzIGJpZ2dlciB0aGFuIGVuZCBjaGFwdGVyXCIpO1xyXG5cdFx0dGhyb3cgXCJCZWdpbiBjaGFwdGVyIGlzIGJpZ2dlciB0aGFuIGVuZCBjaGFwdGVyXCI7XHJcblx0fVxyXG5cclxuXHRsZXQgcmVzID0gXCJcIjtcclxuXHRmb3IgKGxldCBpID0gZmlyc3RDaGFwdGVyOyBpIDw9IGxhc3RDaGFwdGVyOyBpKyspIHtcclxuXHRcdHJlcyArPSBgW1ske2Jvb2t9ICR7aX1dXWA7XHJcblx0XHRpZiAodXNlTmV3TGluZSkge1xyXG5cdFx0XHRyZXMgKz0gXCJcXG5cIjtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIHJlcztcclxufVxyXG4iLCAiaW1wb3J0IHtBcHAsIE5vdGljZSwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZ30gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCBCaWJsZUxpbmtlclBsdWdpbiBmcm9tIFwiLi9tYWluXCI7XHJcbmltcG9ydCB7TGlua1R5cGV9IGZyb20gXCIuL21vZGFscy9saW5rLXZlcnNlLW1vZGFsXCI7XHJcblxyXG4vKipcclxuICogU2V0dGluZ3MgZm9yIHBsdWdpblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgICBwbHVnaW46IEJpYmxlTGlua2VyUGx1Z2luO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEJpYmxlTGlua2VyUGx1Z2luKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXkoKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMVwiLCB7IHRleHQ6IFwiQ29weSBhbmQgTGluayBCaWJsZSB2ZXJzZXMgY29tbWFuZFwiIH0pO1xyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIkZ1bmN0aW9uYWxcIiB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiVmVyc2Ugb2Zmc2V0XCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdDaGFuZ2UgdGhpcyBpZiB3cm9uZyB2ZXJzZXMgYXJlIGJlaW5nIGxpbmtlZCwgZS5nLiB5b3Ugd2FudCBcIkdlbiAxLDEtM1wiIGJ1dCBvdXRwdXQgaXMgdGV4dCBmcm9tIHZlcnNlcyAyLTQgXHUyMTkyIHNldCB0aGlzIHRvIC0xJylcclxuICAgICAgICAgICAgLnNldENsYXNzKFwiaW1wb3J0YW50LXNldHRpbmdcIilcclxuICAgICAgICAgICAgLmFkZFRleHQoKGlucHV0Qm94KSA9PlxyXG4gICAgICAgICAgICAgICAgaW5wdXRCb3hcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudmVyc2VPZmZzZXQudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG51bWJlciA9IE51bWJlci5wYXJzZUludCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gXCItXCIpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihudW1iZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiSW52YWxpZCBpbnB1dCwgcGxlYXNlIGluc2VydCB2YWxpZCBpbnRlZ2VyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRCb3guc2V0VmFsdWUoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudmVyc2VPZmZzZXQgPSBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiVmVyc2UgaGVhZGluZyBsZXZlbFwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgc2V0LCBvbmx5IGhlYWRpbmdzIG9mIHNwZWNpZmllZCBsZXZlbCBhcmUgY29uc2lkZXJlZCB2ZXJzZXMgKGlmIGZpcnN0IGhlYWRpbmcgb2YgdGhpcyBsZXZlbCBpcyBhbHdheXMgYSB2ZXJzZSwgYWxzbyBzZXQgXCJWZXJzZSBvZmZzZXRcIiB0byAtMSknKVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oXCJhbnlcIiwgXCJhbnlcIilcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihcIjZcIiwgXCIjIyMjIyNcIilcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihcIjVcIiwgXCIjIyMjI1wiKVxyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwiNFwiLCBcIiMjIyNcIilcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihcIjNcIiwgXCIjIyNcIilcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihcIjJcIiwgXCIjI1wiKVxyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwiMVwiLCBcIiNcIilcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnZlcnNlSGVhZGluZ0xldmVsPy50b1N0cmluZygpID8/IFwiYW55XCIpXHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy52ZXJzZUhlYWRpbmdMZXZlbCA9IHZhbHVlID09PSBcImFueVwiID8gdW5kZWZpbmVkIDogTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIkluc2VydGVkIHByZWZpeGVzL3Bvc3RmaXhlc1wiIH0pO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJMaW5lIHByZWZpeFwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlN0cmluZyBpbnNlcnRlZCBpbiBmcm9udCBvZiBldmVyeSBsaW5lLCBmb3IgZXhhbXBsZSAnPicgZm9yIHF1b3RlLiBOb3RlOiBJZiB5b3Ugc2V0ICdQdXQgZWFjaCB2ZXJzZSBvbiBhIG5ldyBsaW5lPycgdG8gdHJ1ZSwgdGhlIHByZWZpeCB3aWxsIGJlIGluc2VydGVkIGluIGZyb250IG9mIGV2ZXJ5IGxpbmUuXCIpXHJcbiAgICAgICAgICAgIC5zZXRDbGFzcyhcImltcG9ydGFudC1zZXR0aW5nXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KChpbnB1dEJveCkgPT5cclxuICAgICAgICAgICAgICAgIGlucHV0Qm94XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiSW5zZXJ0IHByZWZpeCBoZXJlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZpeClcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZpeCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkxpbmsgcG9zdGZpeFwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlN0cmluZyBpbnNlcnRlZCBhZnRlciBiaWJsaWNhbCBsaW5rLCB5b3UgY2FuIHVzZSBcXFxcbiB0byBpbnNlcnQgbmV3bGluZS5cIilcclxuICAgICAgICAgICAgLmFkZFRleHQoKGlucHV0Qm94KSA9PlxyXG4gICAgICAgICAgICAgICAgaW5wdXRCb3hcclxuICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJJbnNlcnQgcG9zdGZpeCBoZXJlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnBvc3RmaXgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wb3N0Zml4ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRWFjaCB2ZXJzZSBwcmVmaXhcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJTdHJpbmcgaW5zZXJ0ZWQgaW4gZnJvbnQgb2YgZXZlcnkgY29waWVkIHZlcnNlLiBZb3UgY2FuIHVzZSBcXFwie259XFxcIiB3aGVyZSB5b3Ugd2FudCBudW1iZXIgb2YgZ2l2ZW4gdmVyc2UgaW5zZXJ0ZWQsIGZvciBleGFtcGxlIFxcXCIqKntufSoqIFxcXCIgd2lsbCBtYWtlIGVhY2ggdmVyc2Ugc3RhcnQgd2l0aCBib2xkIHZlcnNlIG51bWJlci4gWW91IGNhbiBhbHNvIHVzZSBcXFwie2Z9XFxcIiB0byBpbnNlcnQgbmFtZSBvZiB0aGUgY29ycmVzcG9uZGluZyBmaWxlIChmb3IgZXhhbXBsZSB0byBjcmVhdGUgb2JzaWRpYW4gbGlua3MpLiBMZWF2ZSBlbXB0eSBmb3Igbm8gcHJlZml4LlwiKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCgoaW5wdXRCb3gpID0+XHJcbiAgICAgICAgICAgICAgICBpbnB1dEJveFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkluc2VydCBwcmVmaXggaGVyZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lYWNoVmVyc2VQcmVmaXgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lYWNoVmVyc2VQcmVmaXggPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKVxyXG5cclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiTGlua3NcIiB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTGluayB0byBsYXN0IHZlcnNlP1wiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlNob3VsZCBsYXN0IHZlcnNlIGJlIGxpbmtlZCBpbiB0aGUgdmlzaWJsZSBsaW5rIGJlZm9yZSB0ZXh0IG9mIHZlcnNlcz9cIilcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtFbmRWZXJzZSlcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtFbmRWZXJzZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkFkZCBpbnZpc2libGUgbGlua3M/XCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwiSW52aXNpYmxlIGxpbmtzIGFyZSBhZGRlZCB0byBlYWNoIHZlcnNlIHVzZWQgKHNvIHlvdSBjYW4gZmluZCB0aGUgY29ubmVjdGlvbnMgbGF0ZXIpLCB0aGV5IGFyZSBvbmx5IHZpc2libGUgaW4gc291cmNlIG1vZGUuXCIpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VJbnZpc2libGVMaW5rcylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZUludmlzaWJsZUxpbmtzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTGluayBvbmx5IGRlZmF1bHRcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJXaGF0IHRoZSBsaW5rIG9ubHkgb3B0aW9uIHNob3VsZCBiZSBzZXQgdG8gYnkgZGVmYXVsdFwiKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua09ubHkpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rT25seSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcblxyXG5cclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImg0XCIsIHsgdGV4dDogXCJPdXRwdXQgZm9ybWF0XCIgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIlB1dCBlYWNoIHZlcnNlIG9uIGEgbmV3IGxpbmU/XCIpXHJcblx0XHRcdC5zZXRDbGFzcyhcImltcG9ydGFudC1zZXR0aW5nXCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwiRWFjaCB2ZXJzZSBpcyBpbnNlcnRlZCBvbiBhIG5ldyBsaW5lICh3aXRoIExpbmsgcHJlZml4KS5cIilcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm5ld0xpbmVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubmV3TGluZXMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuXHJcblx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MubmV3TGluZXMpIHtcclxuXHRcdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdFx0LnNldE5hbWUoXCJGaXJzdCBsaW5lIHByZWZpeFwiKVxyXG5cdFx0XHRcdC5zZXREZXNjKFwiU3BlY2lhbCBwcmVmaXggdGhhdCB3aWxsIGJlIGluc2VydGVkIGluIGZyb250IG9mIHRoZSBmaXJzdCBsaW5lIG9ubHksIHJpZ2h0IGFmdGVyIHRoZSBcXFwiTGluZSBwcmVmaXhcXFwiLiBIYW5keSBmb3IgY2FsbG91dHMuIChPbmx5IGFwcGxpZWQgd2hlbiBQdXQgZWFjaCB2ZXJzZSBvbiBhIG5ldyBsaW5lPyBpcyBzZXQgdG8gdHJ1ZSlcIilcclxuXHRcdFx0XHQuYWRkVGV4dCgoaW5wdXRCb3gpID0+XHJcblx0XHRcdFx0XHRpbnB1dEJveFxyXG5cdFx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoXCJGaXJzdCBsaW5lIHByZWZpeFwiKVxyXG5cdFx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlyc3RMaW5lUHJlZml4KVxyXG5cdFx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlyc3RMaW5lUHJlZml4ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKFwiSW5zZXJ0IHNwYWNlIGJldHdlZW4gdmVyc2VzP1wiKVxyXG5cdFx0XHRcdC5zZXREZXNjKFwiU2hvdWxkIHNwYWNlIGJlIGluc2VydGVkIGJldHdlZW4gdmVyc2VzPyAoT25seSBhcHBsaWVkIHdoZW4gUHV0IGVhY2ggdmVyc2Ugb24gYSBuZXcgbGluZT8gaXMgc2V0IHRvIGZhbHNlLiBVc2VmdWwgZm9yIGxhbmd1YWdlcyBzdWNoIGFzIENoaW5lc2UuKVwiKVxyXG5cdFx0XHRcdC5zZXREaXNhYmxlZCghdGhpcy5wbHVnaW4uc2V0dGluZ3MubmV3TGluZXMpXHJcblx0XHRcdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG5cdFx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbnNlcnRTcGFjZSlcclxuXHRcdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmluc2VydFNwYWNlID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KVxyXG5cdFx0fVxyXG5cclxuXHJcblxyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIk5vdGF0aW9uXCIgfSk7XHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcInBcIiwgeyB0ZXh0OiBcIkFsc28gdXNlZCBpbiB0aGUgbGluayBjb21tYW5kIHdoZW4gdGhlIFxcXCJTaG93IEZpcnN0ICYgTGFzdFxcXCIgbGluayB0eXBlIGlzIHVzZWQuXCIgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIk9uZSB2ZXJzZSBub3RhdGlvblwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlRoaXMgaXMgdGhlIHN5bWJvbCB0aGF0IHdpbGwgYmUgdXNlZCBiZXR3ZWVuIGNoYXB0ZXIgbnVtYmVyIGFuZCB2ZXJzZSBudW1iZXIgd2hlbiBjb3B5aW5nIG9uZSB2ZXJzZS4gRm9yIGV4YW1wbGUgXFxcIi5cXFwiIFx1MjE5MiBHZW4gMS4xLlwiIClcclxuICAgICAgICAgICAgLmFkZFRleHQoKGlucHV0Qm94KSA9PlxyXG4gICAgICAgICAgICAgICAgaW5wdXRCb3hcclxuICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJJbnNlcnQgbm90YXRpb24gc3ltYm9sIGhlcmVcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mub25lVmVyc2VOb3RhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm9uZVZlcnNlTm90YXRpb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJNdWx0aXBsZSB2ZXJzZXMgbm90YXRpb25cIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJUaGlzIGlzIHRoZSBzeW1ib2wgdGhhdCB3aWxsIGJlIHVzZWQgYmV0d2VlbiBjaGFwdGVyIG51bWJlciBhbmQgdmVyc2UgbnVtYmVyIHdoZW4gY29weWluZyBtdWx0aXBsZSB2ZXJzZXMuIEZvciBleGFtcGxlIFxcXCIsXFxcIiBcdTIxOTIgR2VuIDEsMS0zLlwiKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCgoaW5wdXRCb3gpID0+XHJcbiAgICAgICAgICAgICAgICBpbnB1dEJveFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkluc2VydCBub3RhdGlvbiBzeW1ib2wgaGVyZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tdWx0aXBsZVZlcnNlc05vdGF0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubXVsdGlwbGVWZXJzZXNOb3RhdGlvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIk11bHRpcGxlIHRyYW5zbGF0aW9uc1wiIH0pO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJFbmFibGUgbXVsdGlwbGUgdHJhbnNsYXRpb25zXCIpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVNdWx0aXBsZVRyYW5zbGF0aW9ucylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZU11bHRpcGxlVHJhbnNsYXRpb25zID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlTXVsdGlwbGVUcmFuc2xhdGlvbnMpIHtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIlBhdGhzIHRvIHRyYW5zbGF0aW9ucyB3aXRoIHRoZWlyIG5hbWVzXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcIklucHV0IGZ1bGwgcGF0aHMgZnJvbSB0aGUgcm9vdCB2YXVsdCBmb2xkZXIgdG8gZm9sZGVycyBjb250YWluaW5nIEJpYmxlIHRyYW5zbGF0aW9ucywgZWFjaCB0cmFuc2xhdGlvbiBvbiBzZXBhcmF0ZSBsaW5lLiBBbiBleGFtcGxlIG9mIG9uZSBlbnRyeTogXFxcIkJpYmxlL05JVi9cXFwiLiBUaGUgcGx1Z2luIHdpbGwgc2VhcmNoIGZvciBjb3JyZXNwb25kaW5nIEJpYmxlIGZpbGVzIHVzaW5nIGdpdmVuIHBhdGhzIGFzIHN0YXJ0aW5nIHBvaW50cy4gTWFrZSBzdXJlIHRoZXJlIGFyZSBubyBkdXBsaWNhdGUgZmlsZXMgaW4gZ2l2ZW4gcGF0aHMsIG90aGVyd2lzZSBpdCBpcyBoYXJkIHRvIHRlbGwgd2hhdCB0aGUgb3V0cHV0IHdpbGwgYmUuIFRoZSBmaXJzdCB0cmFuc2xhdGlvbiB3aWxsIGJlIGNvbnNpZGVyZWQgeW91ciBtYWluIHRyYW5zbGF0aW9uLlwiKS5hZGRUZXh0QXJlYSgoaW5wdXRCb3gpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRCb3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiQmlibGUvTklWL1xcbkJpYmxlL0VTVi9cIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRyYW5zbGF0aW9uc1BhdGhzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dFBhdGhzID0gdmFsdWUuc3BsaXQoL1xccj9cXG58XFxyLyk7IC8vIHNwbGl0IHVzZXIgaW5wdXQgYnkgbGluZXMgKHJlZ2V4IHRha2VzIGludG8gYWNjb3VudCBhbGwgcG9zc2libGUgbGluZSBlbmRpbmdzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aHM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFBhdGhzLmZvckVhY2goKHBhdGgpID0+IHsgLy8gcGFyc2UgdXNlciBpbnB1dCBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGguYXQoLTEpICE9PSBcIi9cIikgeyAvLyBBZGQgcG90ZW50aWFsbHkgbWlzc2luZyAnLycgdG8gcGF0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRocy5wdXNoKHBhdGggKyBcIi9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRocy5wdXNoKHBhdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRyYW5zbGF0aW9uc1BhdGhzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXJzZWRUcmFuc2xhdGlvblBhdGhzID0gcGF0aHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIClcclxuXHJcblxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiV2hhdCB0byBsaW5rXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcIkNob29zZSB3aGF0IHRyYW5zbGF0aW9ucyBzaG91bGQgYmUgbGlua2VkIHdoZW4gY29weWluZyBhIHZlcnNlLlwiKVxyXG4gICAgICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihcImFsbFwiLCBcIkxpbmsgdG8gYWxsIHRyYW5zbGF0aW9uc1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihcInVzZWRcIiwgXCJMaW5rIG9ubHkgdG8gdXNlZCB0cmFuc2xhdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihcInVzZWRBbmRNYWluXCIsIFwiTGluayB0byB1c2VkIGFuZCBtYWluIHRyYW5zbGF0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwibWFpblwiLCBcIkxpbmsgb25seSB0byBtYWluIHRyYW5zbGF0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudHJhbnNsYXRpb25MaW5raW5nVHlwZSlcclxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudHJhbnNsYXRpb25MaW5raW5nVHlwZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHRcdH1cclxuXHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImg0XCIsIHsgdGV4dDogXCJDb21tZW50c1wiIH0pO1xyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHsgdGV4dDogXCJVc2UgdGhpcyBpZiB5b3UgaGF2ZSBjb21tZW50cyByaWdodCBpbiB0aGUgQmlibGljYWwgdGV4dCB0aGF0IHlvdSB3YW50IHRvIGlnbm9yZSB3aGVuIGNvcHlpbmcgdmVyc2VzLlwiIH0pO1xyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKFwiQ29tbWVudCBiZWdpbm5pbmdcIilcclxuXHRcdFx0LnNldERlc2MoXCJTdHJpbmcgdGhhdCBpcyB1c2VkIHRvIG1hcmsgdGhlIGJlZ2lubmluZyBvZiBhIGNvbW1lbnQsIHdvbid0IGJlIHVzZWQgaWYgaXQgaXMgc2V0IHRvIGFuIGVtcHR5IHN0cmluZy5cIilcclxuXHRcdFx0LmFkZFRleHQoKGlucHV0Qm94KSA9PlxyXG5cdFx0XHRcdGlucHV0Qm94XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoXCIvKlwiKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbW1lbnRTdGFydClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY29tbWVudFN0YXJ0ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KVxyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIkNvbW1lbnQgZW5kaW5nXCIpXHJcblx0XHRcdC5zZXREZXNjKFwiU3RyaW5nIHRoYXQgaXMgdXNlZCB0byBtYXJrIHRoZSBlbmQgb2YgYSBjb21tZW50LCB3b24ndCBiZSB1c2VkIGlmIGl0IGlzIHNldCB0byBhbiBlbXB0eSBzdHJpbmcuXCIpXHJcblx0XHRcdC5hZGRUZXh0KChpbnB1dEJveCkgPT5cclxuXHRcdFx0XHRpbnB1dEJveFxyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiKi9cIilcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb21tZW50RW5kKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb21tZW50RW5kID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KVxyXG5cclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIkNvbnZlcnRvcnNcIiB9KTtcclxuXHRcdGZ1bmN0aW9uIHBhcnNlU3RyaW5nVG9EaWN0aW9uYXJ5KGlucHV0OiBzdHJpbmcpOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9IHtcclxuXHRcdFx0Y29uc3QgZGljdGlvbmFyeTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG5cclxuXHRcdFx0Ly8gTm9ybWFsaXplIHRoZSBsaW5lIGVuZGluZ3MgdG8gXFxuXHJcblx0XHRcdGNvbnN0IG5vcm1hbGl6ZWRJbnB1dCA9IGlucHV0LnJlcGxhY2UoL1xcclxcbnxcXHIvZywgJ1xcbicpO1xyXG5cclxuXHRcdFx0Ly8gU3BsaXQgdGhlIGlucHV0IHN0cmluZyBieSBsaW5lIGJyZWFrc1xyXG5cdFx0XHRjb25zdCBsaW5lcyA9IG5vcm1hbGl6ZWRJbnB1dC5zcGxpdCgnXFxuJyk7XHJcblxyXG5cdFx0XHQvLyBQcm9jZXNzIGVhY2ggbGluZSB0byBmaWxsIHRoZSBkaWN0aW9uYXJ5XHJcblx0XHRcdGxpbmVzLmZvckVhY2gobGluZSA9PiB7XHJcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIGxpbmUgY29udGFpbnMgYSBjb2xvblxyXG5cdFx0XHRcdGlmIChsaW5lLmluY2x1ZGVzKCc6JykpIHtcclxuXHRcdFx0XHRcdGNvbnN0IFtrZXksIHZhbHVlXSA9IGxpbmUuc3BsaXQoJzonKTtcclxuXHRcdFx0XHRcdGlmIChrZXkgJiYgdmFsdWUpIHtcclxuXHRcdFx0XHRcdFx0ZGljdGlvbmFyeVtrZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0cmV0dXJuIGRpY3Rpb25hcnk7XHJcblx0XHR9XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKFwiT3V0cHV0IGJvb2sgbmFtZSBjb252ZXJ0b3JcIilcclxuXHRcdFx0LnNldERlc2MoXCJZb3UgY2FuIHNwZWNpZnkgY29udmVyc2lvbnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHZpc2libGUgYm9vayBuYW1lIGFsaWFzLiBGb3IgZXhhbXBsZSwgaWYgeW91IHB1dCBpbiBcXFwiM0o6MyBKb2huXFxcIiwgdGhlIG91dHB1dCB3aWxsIGJlIGNoYW5nZWQgZnJvbSBcXFwiW1szIEpvaG4tMDEjdjF8M0ogMS4xXV1cXFwiIHRvIFxcXCJbWzMgSm9obi0wMSN2MXwzIEpvaG4gMS4xXV1cXFwiLiBUaGUgZm9ybWF0IHVzZWQgaXMgXFxcIkZyb206VG9cXFwiLCBlYWNoIGVudHJ5IG9uIGl0J3Mgb3duIGxpbmUuIFRJUDogQ2hhdEdQVCAob3Igc2ltaWxhciBBSSB0b29sKSB3aWxsIHByb2JhYmx5IGJlIGFibGUgdG8gaGVscCB5b3Ugd2hlbiBjcmVhdGluZyB0aGUgaW5wdXQuXCIpXHJcblx0XHRcdC5zZXRDbGFzcyhcImJpZy10ZXh0LWFyZWFcIilcclxuXHRcdFx0LmFkZFRleHRBcmVhKChpbnB1dEJveCkgPT5cclxuXHRcdFx0XHRpbnB1dEJveFxyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiR246R2VuZXNpc1xcbkV4OkV4b2R1c1xcbi4uLlwiKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm91dHB1dEJvb2tNYXBTdHJpbmcpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm91dHB1dEJvb2tNYXBTdHJpbmcgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Mub3V0cHV0Qm9va01hcCA9IHBhcnNlU3RyaW5nVG9EaWN0aW9uYXJ5KHZhbHVlKTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpXHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKFwiSW5wdXQgYm9vayBuYW1lIGNvbnZlcnRvclwiKVxyXG5cdFx0XHQuc2V0RGVzYyhcIllvdSBjYW4gc3BlY2lmeSBjb252ZXJzaW9ucyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgdXNlZCBib29rIG5hbWUgd2hlbiBzZWFyY2hpbmcgZm9yIHRleHQgb2YgYSB2ZXJzZS4gRm9yIGV4YW1wbGUsIGlmIHlvdSBwdXQgaW4gXFxcIkduOkdlblxcXCIsIHRoZSBpbnB1dCBcXFwiR24gMSwxXFxcIiB3aWxsIHdvcmsgZXZlbiB3aGVuIHRoZSBmaWxlIGlzIGNhbGxlZCBcXFwiR2VuIDEsMVxcXCIuIFRoZSBmb3JtYXQgdXNlZCBpcyBhZ2FpbiBcXFwiRnJvbTpUb1xcXCIsIGVhY2ggZW50cnkgb24gaXQncyBvd24gbGluZSwgYW5kIHdpbGwgYmUgdXNlZCBieSB0aGUgcGx1Z2luIHdoZW4gdGhlIHNlYXJjaCBmYWlscyB1c2luZyB0aGUgdW5jaGFuZ2VkIGlucHV0LiBNdWx0aXBsZSBlbnRyaWVzIGNhbiBoYXZlIHNhbWUgcmVzdWx0IG1hcHBpbmcsIGZvciBleGFtcGxlIHlvdSBjYW4gdXNlIFxcXCJHOkdlblxcXCIgYW5kIFxcXCJHbjpHZW5cXFwiLlwiKVxyXG5cdFx0XHQuc2V0Q2xhc3MoXCJiaWctdGV4dC1hcmVhXCIpXHJcblx0XHRcdC5hZGRUZXh0QXJlYSgoaW5wdXRCb3gpID0+XHJcblx0XHRcdFx0aW5wdXRCb3hcclxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcihcIkc6R2VuXFxuR246R2VuXFxuTDpMa1xcbi4uLlwiKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmlucHV0Qm9va01hcFN0cmluZylcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5wdXRCb29rTWFwU3RyaW5nID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmlucHV0Qm9va01hcCA9IHBhcnNlU3RyaW5nVG9EaWN0aW9uYXJ5KHZhbHVlKTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpXHJcbiAgICAgICAgLy8gTElOSyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDFcIiwgeyB0ZXh0OiBcIkxpbmsgQmlibGUgdmVyc2VzIGNvbW1hbmRcIiB9KTtcclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiRmlsZSBmb3JtYXRcIiB9KTtcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJMaW5rIHNlcGFyYXRvclwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlRoaXMgaXMgdGhlIHNlcGFyYXRvciB0aGF0IHdpbGwgYmUgdXNlZCB3aGVuIGxpbmtpbmcsIGUuZy4gaWYgeW91IGVudGVyICcjJyBoZXJlLCBvdXRwdXQgd2lsbCBiZSBbW0dlbiAxIzFdXS4gSWYgeW91IGFyZSB1c2luZyBoZWFkaW5ncyB0byBtYXJrIHZlcnNlcywgdXNlICcjJy4gSWYgeW91IGFyZSB1c2luZyBibG9jayByZWZlcmVuY2VzLCB1c2UgJ14nLlwiKVxyXG4gICAgICAgICAgICAuc2V0Q2xhc3MoXCJpbXBvcnRhbnQtc2V0dGluZ1wiKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCgoaW5wdXRCb3gpID0+XHJcbiAgICAgICAgICAgICAgICBpbnB1dEJveFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkluc2VydCBzZXBhcmF0b3IgaGVyZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rU2VwYXJhdG9yKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua1NlcGFyYXRvciA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcblxyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJWZXJzZSBwcmVmaXhcIilcclxuICAgICAgICAgICAgLnNldERlc2MoJ0ZpbGwgdGhpcyBpZiB5b3UgYXJlIHVzaW5nIHZlcnNlIHByZWZpeGVzIGluIHlvdXIgYmlibGUgZmlsZXMsIGUuZy4geW91IGhhdmUgXCJ2MVwiIGluIHlvdXIgZmlsZSBcdTIxOTIgc2V0IHRvIFwidlwiLicpXHJcbiAgICAgICAgICAgIC5zZXRDbGFzcyhcImltcG9ydGFudC1zZXR0aW5nXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KChpbnB1dEJveCkgPT5cclxuICAgICAgICAgICAgICAgIGlucHV0Qm94XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiSW5zZXJ0IHByZWZpeCBoZXJlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnZlcnNlUHJlZml4KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudmVyc2VQcmVmaXggPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKVxyXG5cclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiRGVmYXVsdHNcIiB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTGluayB0eXBlIGRlZmF1bHQgdmFsdWVcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJWYWx1ZSB0aGF0IHdpbGwgYmUgc2VsZWN0ZWQgYnkgZGVmYXVsdCBpbiBsaW5rIG1vZGFsLlwiKVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oTGlua1R5cGUuQmFzaWMsIExpbmtUeXBlLkJhc2ljKVxyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKExpbmtUeXBlLkVtYmVkZGVkLCBMaW5rVHlwZS5FbWJlZGRlZClcclxuXHRcdFx0XHRkcm9wZG93bi5hZGRPcHRpb24oTGlua1R5cGUuRmlyc3RBbmRMYXN0LCBcIlNob3cgRmlyc3QgJiBMYXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKExpbmtUeXBlLkludmlzaWJsZSwgTGlua1R5cGUuSW52aXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua1R5cGVQcmVzZXQpXHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rVHlwZVByZXNldCA9IHZhbHVlIGFzIExpbmtUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJVc2UgbmV3IGxpbmVzIGRlZmF1bHQgdmFsdWVcIilcclxuXHRcdFx0LnNldERlc2MoXCJWYWx1ZSB0aGF0IHdpbGwgYmUgc2VsZWN0ZWQgYnkgZGVmYXVsdCBpbiBsaW5rIG1vZGFsLlwiKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubmV3TGluZVByZXNldClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubmV3TGluZVByZXNldCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiRm9ybWF0XCIgfSk7XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJDYXBpdGFsaXplIGJvb2sgbmFtZXM/XCIpXHJcblx0XHRcdC5zZXREZXNjKFxyXG5cdFx0XHRcdCdTaG91bGQgYm9vayBuYW1lcyBiZSBhdXRvbWF0aWNhbGx5IGNhcGl0YWxpemVkPyBGb3IgZXhhbXBsZSBcIjFjT3JcIiB3aWxsIGJlIHR1cm5lZCBpbnRvIFwiMUNvclwiLidcclxuXHRcdFx0KVxyXG5cdFx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvdWxkQ2FwaXRhbGl6ZUJvb2tOYW1lcylcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvdWxkQ2FwaXRhbGl6ZUJvb2tOYW1lcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIk1pc2NcIiB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiVmVyaWZ5IGZpbGVzP1wiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlZlcmlmeSBleGlzdGVuY2Ugb2YgZmlsZXMgeW91IGFyZSB0cnlpbmcgdG8gbGluaywgc28gdGhhdCB5b3UgYXJlIG5vdCBpbnNlcnRpbmcgd3JvbmcgcmVmZXJlbmNlcyBieSBtaXN0YWtlLlwiKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudmVyaWZ5RmlsZXNXaGVuTGlua2luZylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnZlcmlmeUZpbGVzV2hlbkxpbmtpbmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKVxyXG5cclxuXHJcbiAgICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFB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
